
SOC_Attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005800  08005800  00015800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b0  080058b0  00020574  2**0
                  CONTENTS
  4 .ARM          00000008  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b8  080058b8  00020574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000574  20000000  080058c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000578  08005e34  00020578  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08005e34  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b143  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf9  00000000  00000000  0002b6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017045  00000000  00000000  0002e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb26  00000000  00000000  0004549d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e8b  00000000  00000000  00050fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  000e2ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000578 	.word	0x20000578
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057e4 	.word	0x080057e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000057c 	.word	0x2000057c
 80001dc:	080057e4 	.word	0x080057e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	convCompleted =1;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_ADC_ConvCpltCallback+0x1c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000069c 	.word	0x2000069c

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fb8d 	bl	80015d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  BatterySOCEstimation_initialize();
 8000eba:	f003 fd9d 	bl	80049f8 <BatterySOCEstimation_initialize>

	// Set initial values for the inputs
	rtU.InitialSOC = 0.8;   // Example initial State of Charge
 8000ebe:	4952      	ldr	r1, [pc, #328]	; (8001008 <main+0x158>)
 8000ec0:	a34d      	add	r3, pc, #308	; (adr r3, 8000ff8 <main+0x148>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.CellTemp = 25.0;    // Example cell temperature in degrees Celsius
 8000eca:	494f      	ldr	r1, [pc, #316]	; (8001008 <main+0x158>)
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <main+0x15c>)
 8000ed2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.CellVoltage = 3.7;  // Example cell voltage
 8000ed6:	494c      	ldr	r1, [pc, #304]	; (8001008 <main+0x158>)
 8000ed8:	a349      	add	r3, pc, #292	; (adr r3, 8001000 <main+0x150>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.Current = 1.5;      // Example current
 8000ee2:	4949      	ldr	r1, [pc, #292]	; (8001008 <main+0x158>)
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <main+0x160>)
 8000eea:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f8a7 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f9af 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 f98d 	bl	8001214 <MX_DMA_Init>
  MX_ADC1_Init();
 8000efa:	f000 f901 	bl	8001100 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 f95f 	bl	80011c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f02:	2202      	movs	r2, #2
 8000f04:	4943      	ldr	r1, [pc, #268]	; (8001014 <main+0x164>)
 8000f06:	4844      	ldr	r0, [pc, #272]	; (8001018 <main+0x168>)
 8000f08:	f000 fd4e 	bl	80019a8 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while(!convCompleted);
 8000f0c:	bf00      	nop
 8000f0e:	4b43      	ldr	r3, [pc, #268]	; (800101c <main+0x16c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0fb      	beq.n	8000f0e <main+0x5e>



		for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e00a      	b.n	8000f32 <main+0x82>
		{
			currentAnalog = (uint16_t)rawValues[0]; // stores variables coming from PA0
 8000f1c:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <main+0x164>)
 8000f1e:	881a      	ldrh	r2, [r3, #0]
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <main+0x170>)
 8000f22:	801a      	strh	r2, [r3, #0]
			ocvAnalog = (uint16_t)rawValues[1]; // stores variables coming from PA1
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <main+0x164>)
 8000f26:	885a      	ldrh	r2, [r3, #2]
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <main+0x174>)
 8000f2a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <main+0x168>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3ef      	bcc.n	8000f1c <main+0x6c>
		}

		if(HAL_GPIO_ReadPin(relayTrigger_GPIO_Port, relayInput_Pin))
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	483a      	ldr	r0, [pc, #232]	; (8001028 <main+0x178>)
 8000f40:	f001 fef0 	bl	8002d24 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d01c      	beq.n	8000f84 <main+0xd4>
		{
			HAL_GPIO_WritePin(relayInput_GPIO_Port, relayTrigger_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	4836      	ldr	r0, [pc, #216]	; (8001028 <main+0x178>)
 8000f50:	f001 ff00 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_Delay(1000); // delay to let relay switch
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f000 fbae 	bl	80016b8 <HAL_Delay>
			for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73bb      	strb	r3, [r7, #14]
 8000f60:	e006      	b.n	8000f70 <main+0xc0>
			{
				// currentAnalog = (uint16_t)rawValues[0]; // stores variables coming from PA0
				ocvAnalog = (uint16_t)rawValues[1]; // stores variables coming from PA1
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <main+0x164>)
 8000f64:	885a      	ldrh	r2, [r3, #2]
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <main+0x174>)
 8000f68:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73bb      	strb	r3, [r7, #14]
 8000f70:	7bba      	ldrb	r2, [r7, #14]
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <main+0x168>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3f3      	bcc.n	8000f62 <main+0xb2>
			}
			HAL_GPIO_WritePin(relayInput_GPIO_Port, relayTrigger_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	482a      	ldr	r0, [pc, #168]	; (8001028 <main+0x178>)
 8000f80:	f001 fee8 	bl	8002d54 <HAL_GPIO_WritePin>
		}

		//kalman
		BatterySOCEstimation_step();
 8000f84:	f003 f91c 	bl	80041c0 <BatterySOCEstimation_step>

		// Retrieve the output (SOC estimation)
		double estimatedSOC = rtY.Out1;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <main+0x17c>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	e9c7 2300 	strd	r2, r3, [r7]



		// Clear the message buffer before writing
		memset(msg, 0, sizeof(msg));
 8000f92:	2214      	movs	r2, #20
 8000f94:	2100      	movs	r1, #0
 8000f96:	4826      	ldr	r0, [pc, #152]	; (8001030 <main+0x180>)
 8000f98:	f003 fd94 	bl	8004ac4 <memset>
		snprintf(msg, sizeof(msg), "New Current: %hu\r\n", currentAnalog);
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <main+0x170>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <main+0x184>)
 8000fa2:	2114      	movs	r1, #20
 8000fa4:	4822      	ldr	r0, [pc, #136]	; (8001030 <main+0x180>)
 8000fa6:	f003 fd95 	bl	8004ad4 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000faa:	4821      	ldr	r0, [pc, #132]	; (8001030 <main+0x180>)
 8000fac:	f7ff f918 	bl	80001e0 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb8:	491d      	ldr	r1, [pc, #116]	; (8001030 <main+0x180>)
 8000fba:	481f      	ldr	r0, [pc, #124]	; (8001038 <main+0x188>)
 8000fbc:	f002 fb89 	bl	80036d2 <HAL_UART_Transmit>

		// Clear the message buffer before writing
		memset(msg, 0, sizeof(msg));
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <main+0x180>)
 8000fc6:	f003 fd7d 	bl	8004ac4 <memset>
		snprintf(msg, sizeof(msg), "New Voltage: %hu\r\n", ocvAnalog);
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <main+0x174>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <main+0x18c>)
 8000fd0:	2114      	movs	r1, #20
 8000fd2:	4817      	ldr	r0, [pc, #92]	; (8001030 <main+0x180>)
 8000fd4:	f003 fd7e 	bl	8004ad4 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000fd8:	4815      	ldr	r0, [pc, #84]	; (8001030 <main+0x180>)
 8000fda:	f7ff f901 	bl	80001e0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe6:	4912      	ldr	r1, [pc, #72]	; (8001030 <main+0x180>)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <main+0x188>)
 8000fea:	f002 fb72 	bl	80036d2 <HAL_UART_Transmit>

		HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fb61 	bl	80016b8 <HAL_Delay>
  {
 8000ff6:	e789      	b.n	8000f0c <main+0x5c>
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fe99999 	.word	0x3fe99999
 8001000:	9999999a 	.word	0x9999999a
 8001004:	400d9999 	.word	0x400d9999
 8001008:	200006f0 	.word	0x200006f0
 800100c:	40390000 	.word	0x40390000
 8001010:	3ff80000 	.word	0x3ff80000
 8001014:	20000684 	.word	0x20000684
 8001018:	20000594 	.word	0x20000594
 800101c:	2000069c 	.word	0x2000069c
 8001020:	20000680 	.word	0x20000680
 8001024:	20000682 	.word	0x20000682
 8001028:	40020000 	.word	0x40020000
 800102c:	20000710 	.word	0x20000710
 8001030:	20000688 	.word	0x20000688
 8001034:	08005800 	.word	0x08005800
 8001038:	2000063c 	.word	0x2000063c
 800103c:	08005814 	.word	0x08005814

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd38 	bl	8004ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <SystemClock_Config+0xb8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <SystemClock_Config+0xb8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <SystemClock_Config+0xb8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <SystemClock_Config+0xbc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <SystemClock_Config+0xbc>)
 800108e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <SystemClock_Config+0xbc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fe67 	bl	8002d88 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c0:	f000 f8e2 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f8ca 	bl	8003278 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ea:	f000 f8cd 	bl	8001288 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <MX_ADC1_Init+0xb8>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001126:	2201      	movs	r2, #1
 8001128:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800112c:	2201      	movs	r2, #1
 800112e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_ADC1_Init+0xbc>)
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800114c:	2202      	movs	r2, #2
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800115a:	2201      	movs	r2, #1
 800115c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001160:	f000 face 	bl	8001700 <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800116a:	f000 f88d 	bl	8001288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001176:	2307      	movs	r3, #7
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001180:	f000 fd20 	bl	8001bc4 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800118a:	f000 f87d 	bl	8001288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1; // PA1
 800118e:	2301      	movs	r3, #1
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800119c:	f000 fd12 	bl	8001bc4 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011a6:	f000 f86f 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000594 	.word	0x20000594
 80011b8:	40012000 	.word	0x40012000
 80011bc:	0f000001 	.word	0x0f000001

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f002 fa1e 	bl	8003638 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f841 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000063c 	.word	0x2000063c
 8001210:	40004400 	.word	0x40004400

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x3c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x3c>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x3c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2038      	movs	r0, #56	; 0x38
 800123c:	f001 f847 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001240:	2038      	movs	r0, #56	; 0x38
 8001242:	f001 f860 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_GPIO_Init+0x30>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <MX_GPIO_Init+0x30>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_GPIO_Init+0x30>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <HAL_ADC_MspInit+0xec>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d15f      	bne.n	80013c6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133e:	2303      	movs	r3, #3
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001342:	2303      	movs	r3, #3
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4821      	ldr	r0, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001352:	f001 fb63 	bl	8002a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001358:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <HAL_ADC_MspInit+0xfc>)
 800135a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001374:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001384:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 800139c:	f000 ffce 	bl	800233c <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013a6:	f7ff ff6f 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_ADC_MspInit+0xf8>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2101      	movs	r1, #1
 80013ba:	2012      	movs	r0, #18
 80013bc:	f000 ff87 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013c0:	2012      	movs	r0, #18
 80013c2:	f000 ffa0 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200005dc 	.word	0x200005dc
 80013e0:	40026410 	.word	0x40026410

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12b      	bne.n	800145e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_UART_MspInit+0x88>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_UART_MspInit+0x88>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143e:	230c      	movs	r3, #12
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_MspInit+0x8c>)
 800145a:	f001 fadf 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004400 	.word	0x40004400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f8da 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <ADC_IRQHandler+0x10>)
 80014ce:	f000 f95a 	bl	8001786 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000594 	.word	0x20000594

080014dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <DMA2_Stream0_IRQHandler+0x10>)
 80014e2:	f001 f831 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200005dc 	.word	0x200005dc

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 faa6 	bl	8004a70 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20018000 	.word	0x20018000
 8001550:	00000400 	.word	0x00000400
 8001554:	200006a0 	.word	0x200006a0
 8001558:	20000728 	.word	0x20000728

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ffd7 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f003 fa65 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff fc7d 	bl	8000eb0 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000574 	.word	0x20000574
  ldr r2, =_sidata
 80015c4:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 80015c8:	20000578 	.word	0x20000578
  ldr r4, =_ebss
 80015cc:	20000728 	.word	0x20000728

080015d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <DMA1_Stream0_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 fe5b 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fe44 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fe73 	bl	8002322 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001654:	f000 fe3b 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	200006a4 	.word	0x200006a4

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200006a4 	.word	0x200006a4

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e033      	b.n	800177e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fde0 	bl	80012e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001746:	f023 0302 	bic.w	r3, r3, #2
 800174a:	f043 0202 	orr.w	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fb58 	bl	8001e08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
 800176e:	e001      	b.n	8001774 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d049      	beq.n	8001850 <HAL_ADC_IRQHandler+0xca>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d046      	beq.n	8001850 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d12b      	bne.n	8001840 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d127      	bne.n	8001840 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d119      	bne.n	8001840 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0220 	bic.w	r2, r2, #32
 800181a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fb25 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f06f 0212 	mvn.w	r2, #18
 800184e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d057      	beq.n	8001916 <HAL_ADC_IRQHandler+0x190>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d054      	beq.n	8001916 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d139      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001898:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d12b      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d124      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d11d      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fbfc 	bl	8002104 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 020c 	mvn.w	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001924:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d017      	beq.n	800195c <HAL_ADC_IRQHandler+0x1d6>
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d014      	beq.n	800195c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10d      	bne.n	800195c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f925 	bl	8001b9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0201 	mvn.w	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_ADC_IRQHandler+0x218>
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0220 	mvn.w	r2, #32
 800198c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f90e 	bl	8001bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0220 	mvn.w	r2, #32
 800199c:	601a      	str	r2, [r3, #0]
  }
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Start_DMA+0x1e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0ce      	b.n	8001b64 <HAL_ADC_Start_DMA+0x1bc>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d018      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ec:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_ADC_Start_DMA+0x1c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_ADC_Start_DMA+0x1c8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9a      	lsrs	r2, r3, #18
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1c:	d107      	bne.n	8001a2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 8086 	bne.w	8001b4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7c:	d106      	bne.n	8001a8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f023 0206 	bic.w	r2, r3, #6
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_ADC_Start_DMA+0x1cc>)
 8001a9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_ADC_Start_DMA+0x1d0>)
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_ADC_Start_DMA+0x1d4>)
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <HAL_ADC_Start_DMA+0x1d8>)
 8001ab4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001abe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ace:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ade:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	334c      	adds	r3, #76	; 0x4c
 8001aea:	4619      	mov	r1, r3
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f000 fcd2 	bl	8002498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d129      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e020      	b.n	8001b62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_ADC_Start_DMA+0x1dc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11b      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x1ba>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d114      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	e00b      	b.n	8001b62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	40012300 	.word	0x40012300
 8001b78:	08002001 	.word	0x08002001
 8001b7c:	080020bb 	.word	0x080020bb
 8001b80:	080020d7 	.word	0x080020d7
 8001b84:	40012000 	.word	0x40012000

08001b88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1c>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e105      	b.n	8001dec <HAL_ADC_ConfigChannel+0x228>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d925      	bls.n	8001c3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68d9      	ldr	r1, [r3, #12]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	3b1e      	subs	r3, #30
 8001c06:	2207      	movs	r2, #7
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68d9      	ldr	r1, [r3, #12]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4403      	add	r3, r0
 8001c2e:	3b1e      	subs	r3, #30
 8001c30:	409a      	lsls	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e022      	b.n	8001c82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6919      	ldr	r1, [r3, #16]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	2207      	movs	r2, #7
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6919      	ldr	r1, [r3, #16]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4403      	add	r3, r0
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d824      	bhi.n	8001cd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b05      	subs	r3, #5
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	400a      	ands	r2, r1
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b05      	subs	r3, #5
 8001cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	e04c      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d824      	bhi.n	8001d26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b23      	subs	r3, #35	; 0x23
 8001cee:	221f      	movs	r2, #31
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3b23      	subs	r3, #35	; 0x23
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
 8001d24:	e023      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b41      	subs	r3, #65	; 0x41
 8001d38:	221f      	movs	r2, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	400a      	ands	r2, r1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b41      	subs	r3, #65	; 0x41
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_ADC_ConfigChannel+0x234>)
 8001d70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_ADC_ConfigChannel+0x238>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1cc>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b12      	cmp	r3, #18
 8001d82:	d105      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_ADC_ConfigChannel+0x238>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d123      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x21e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d003      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x1e6>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b11      	cmp	r3, #17
 8001da8:	d11b      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d111      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_ADC_ConfigChannel+0x23c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_ADC_ConfigChannel+0x240>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9a      	lsrs	r2, r3, #18
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40012300 	.word	0x40012300
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	20000000 	.word	0x20000000
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e10:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <ADC_Init+0x1f0>)
 8001e12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	021a      	lsls	r2, r3, #8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6899      	ldr	r1, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <ADC_Init+0x1f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d022      	beq.n	8001ee6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6899      	ldr	r1, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	e00f      	b.n	8001f06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0202 	bic.w	r2, r2, #2
 8001f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
 8001f20:	005a      	lsls	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	035a      	lsls	r2, r3, #13
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	e007      	b.n	8001f7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	051a      	lsls	r2, r3, #20
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6899      	ldr	r1, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fbe:	025a      	lsls	r2, r3, #9
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	029a      	lsls	r2, r3, #10
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	0f000001 	.word	0x0f000001

08002000 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13c      	bne.n	8002094 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12b      	bne.n	800208c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d127      	bne.n	800208c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002054:	2b00      	cmp	r3, #0
 8002056:	d119      	bne.n	800208c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0220 	bic.w	r2, r2, #32
 8002066:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7fe feff 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002092:	e00e      	b.n	80020b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fd85 	bl	8001bb0 <HAL_ADC_ErrorCallback>
}
 80020a6:	e004      	b.n	80020b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fd5d 	bl	8001b88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0204 	orr.w	r2, r3, #4
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff fd5a 	bl	8001bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f9aa 	bl	80016a0 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e099      	b.n	800248c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e00f      	b.n	800239a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff f991 	bl	80016a0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d908      	bls.n	800239a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e078      	b.n	800248c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <HAL_DMA_Init+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b04      	cmp	r3, #4
 800242c:	d117      	bne.n	800245e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa6f 	bl	8002924 <DMA_CheckFifoParam>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800245a:	2301      	movs	r3, #1
 800245c:	e016      	b.n	800248c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa26 	bl	80028b8 <DMA_CalcBaseAndBitshift>
 800246c:	4603      	mov	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f010803f 	.word	0xf010803f

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Start_IT+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e040      	b.n	8002540 <HAL_DMA_Start_IT+0xa8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12f      	bne.n	8002532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9b8 	bl	800285c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0216 	orr.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e005      	b.n	800253e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002554:	4b8e      	ldr	r3, [pc, #568]	; (8002790 <HAL_DMA_IRQHandler+0x248>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8e      	ldr	r2, [pc, #568]	; (8002794 <HAL_DMA_IRQHandler+0x24c>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2208      	movs	r2, #8
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2208      	movs	r2, #8
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2201      	movs	r2, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2204      	movs	r2, #4
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2204      	movs	r2, #4
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2210      	movs	r2, #16
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d043      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2210      	movs	r2, #16
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d024      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	e01f      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e016      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0208 	bic.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2220      	movs	r2, #32
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808f 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8087 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2220      	movs	r2, #32
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d136      	bne.n	8002760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0216 	bic.w	r2, r2, #22
 8002700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_DMA_IRQHandler+0x1da>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	223f      	movs	r2, #63	; 0x3f
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d07e      	beq.n	8002854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
        }
        return;
 800275e:	e079      	b.n	8002854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	2b00      	cmp	r3, #0
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	e02c      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000
 8002794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e01e      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0210 	bic.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2205      	movs	r2, #5
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d307      	bcc.n	8002830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f2      	bne.n	8002814 <HAL_DMA_IRQHandler+0x2cc>
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e000      	b.n	8002856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002854:	bf00      	nop
    }
  }
}
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d108      	bne.n	800289c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800289a:	e007      	b.n	80028ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3b10      	subs	r3, #16
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <DMA_CalcBaseAndBitshift+0x64>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <DMA_CalcBaseAndBitshift+0x68>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d909      	bls.n	80028fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	1d1a      	adds	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	; 0x58
 80028f8:	e007      	b.n	800290a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	aaaaaaab 	.word	0xaaaaaaab
 8002920:	08005840 	.word	0x08005840

08002924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d856      	bhi.n	80029f2 <DMA_CheckFifoParam+0xce>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <DMA_CheckFifoParam+0x28>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	0800295d 	.word	0x0800295d
 8002950:	0800296f 	.word	0x0800296f
 8002954:	0800295d 	.word	0x0800295d
 8002958:	080029f3 	.word	0x080029f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d046      	beq.n	80029f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e043      	b.n	80029f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002976:	d140      	bne.n	80029fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297c:	e03d      	b.n	80029fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d121      	bne.n	80029cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d837      	bhi.n	80029fe <DMA_CheckFifoParam+0xda>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <DMA_CheckFifoParam+0x70>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029ab 	.word	0x080029ab
 800299c:	080029a5 	.word	0x080029a5
 80029a0:	080029bd 	.word	0x080029bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e030      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d025      	beq.n	8002a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ba:	e022      	b.n	8002a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029c4:	d11f      	bne.n	8002a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ca:	e01c      	b.n	8002a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d903      	bls.n	80029da <DMA_CheckFifoParam+0xb6>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d003      	beq.n	80029e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029d8:	e018      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      break;
 80029de:	e015      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e00b      	b.n	8002a0a <DMA_CheckFifoParam+0xe6>
      break;
 80029f2:	bf00      	nop
 80029f4:	e00a      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
 80029f8:	e008      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
 80029fc:	e006      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
 8002a00:	e004      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e159      	b.n	8002cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8148 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x202>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x1fe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a47      	ldr	r2, [pc, #284]	; (8002d14 <HAL_GPIO_Init+0x2f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x1fa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x1f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a45      	ldr	r2, [pc, #276]	; (8002d1c <HAL_GPIO_Init+0x300>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x1f2>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a2f      	ldr	r2, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f aea2 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e267      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d075      	beq.n	8002e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d00c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d05b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d157      	bne.n	8002e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e242      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x74>
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6f      	ldr	r2, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6c      	ldr	r2, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002e20:	4b69      	ldr	r3, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fc2e 	bl	80016a0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe fc2a 	bl	80016a0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e207      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xc0>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fc1a 	bl	80016a0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fc16 	bl	80016a0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1f3      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0xe8>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d063      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1c7      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e03a      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe fbcf 	bl	80016a0 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe fbcb 	bl	80016a0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1a8      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fbae 	bl	80016a0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe fbaa 	bl	80016a0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e187      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fb8e 	bl	80016a0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe fb8a 	bl	80016a0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e167      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x200>
 8002fa6:	e01b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fb77 	bl	80016a0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e00e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe fb73 	bl	80016a0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d907      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e150      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	42470000 	.word	0x42470000
 8002fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ea      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8097 	beq.w	800311c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b7d      	ldr	r3, [pc, #500]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a7c      	ldr	r2, [pc, #496]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b7a      	ldr	r3, [pc, #488]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b74      	ldr	r3, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe fb33 	bl	80016a0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fb2f 	bl	80016a0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e10c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_OscConfig+0x474>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x2ea>
 8003064:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a63      	ldr	r2, [pc, #396]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x30c>
 800307a:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a5e      	ldr	r2, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a5b      	ldr	r2, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003094:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe faf4 	bl	80016a0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe faf0 	bl	80016a0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0cb      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7fe fade 	bl	80016a0 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fe fada 	bl	80016a0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0b5      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a1 	beq.w	8003268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d05c      	beq.n	80031ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d141      	bne.n	80031be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe faae 	bl	80016a0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe faaa 	bl	80016a0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e087      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe fa83 	bl	80016a0 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe fa7f 	bl	80016a0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e05c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x416>
 80031bc:	e054      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fa6c 	bl	80016a0 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe fa68 	bl	80016a0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e045      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e038      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
 8003200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x4ec>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d028      	beq.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d121      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11a      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cc      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d90c      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d044      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e067      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4934      	ldr	r1, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe f99a 	bl	80016a0 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe f996 	bl	80016a0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f821 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f8fa 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08005828 	.word	0x08005828
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b090      	sub	sp, #64	; 0x40
 800344a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x40>
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 80a1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x3a>
 8003476:	e09b      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800347c:	e09b      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003482:	e098      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d028      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	2200      	movs	r2, #0
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	627a      	str	r2, [r7, #36]	; 0x24
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034ac:	2100      	movs	r1, #0
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 80034b0:	fb03 f201 	mul.w	r2, r3, r1
 80034b4:	2300      	movs	r3, #0
 80034b6:	fb00 f303 	mul.w	r3, r0, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	4a43      	ldr	r2, [pc, #268]	; (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 80034be:	fba0 1202 	umull	r1, r2, r0, r2
 80034c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c4:	460a      	mov	r2, r1
 80034c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80034c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ca:	4413      	add	r3, r2
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	2200      	movs	r2, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034de:	f7fd fb55 	bl	8000b8c <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4613      	mov	r3, r2
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ea:	e053      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	617a      	str	r2, [r7, #20]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034fe:	f04f 0b00 	mov.w	fp, #0
 8003502:	4652      	mov	r2, sl
 8003504:	465b      	mov	r3, fp
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	0159      	lsls	r1, r3, #5
 8003510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003514:	0150      	lsls	r0, r2, #5
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	ebb2 080a 	subs.w	r8, r2, sl
 800351e:	eb63 090b 	sbc.w	r9, r3, fp
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800352e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003532:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003536:	ebb2 0408 	subs.w	r4, r2, r8
 800353a:	eb63 0509 	sbc.w	r5, r3, r9
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	00eb      	lsls	r3, r5, #3
 8003548:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354c:	00e2      	lsls	r2, r4, #3
 800354e:	4614      	mov	r4, r2
 8003550:	461d      	mov	r5, r3
 8003552:	eb14 030a 	adds.w	r3, r4, sl
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	eb45 030b 	adc.w	r3, r5, fp
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	2200      	movs	r2, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	60fa      	str	r2, [r7, #12]
 8003584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003588:	f7fd fb00 	bl	8000b8c <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3740      	adds	r7, #64	; 0x40
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	017d7840 	.word	0x017d7840

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08005838 	.word	0x08005838

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08005838 	.word	0x08005838

08003638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03f      	b.n	80036ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fec0 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800367a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f929 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08a      	sub	sp, #40	; 0x28
 80036d6:	af02      	add	r7, sp, #8
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d17c      	bne.n	80037ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_UART_Transmit+0x2c>
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e075      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UART_Transmit+0x3e>
 800370c:	2302      	movs	r3, #2
 800370e:	e06e      	b.n	80037ee <HAL_UART_Transmit+0x11c>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fd ffbb 	bl	80016a0 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x82>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003764:	e02a      	b.n	80037bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f840 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e036      	b.n	80037ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e007      	b.n	80037ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1cf      	bne.n	8003766 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f810 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b090      	sub	sp, #64	; 0x40
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e050      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380e:	d04c      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
 8003816:	f7fd ff43 	bl	80016a0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003822:	429a      	cmp	r2, r3
 8003824:	d241      	bcs.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	637a      	str	r2, [r7, #52]	; 0x34
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387a:	623a      	str	r2, [r7, #32]
 800387c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69f9      	ldr	r1, [r7, #28]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	61bb      	str	r3, [r7, #24]
   return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e5      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d09f      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3740      	adds	r7, #64	; 0x40
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	; 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7ff fe4c 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7ff fe33 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a18:	f7fd f8b8 	bl	8000b8c <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aae:	f7fd f86d 	bl	8000b8c <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	; 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b6a:	f7fd f80f 	bl	8000b8c <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e105      	b.n	8003daa <UART_SetConfig+0x4d6>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c2c:	f7fc ffae 	bl	8000b8c <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cca:	f7fc ff5f 	bl	8000b8c <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441c      	add	r4, r3
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	667a      	str	r2, [r7, #100]	; 0x64
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d66:	4649      	mov	r1, r9
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d70:	4641      	mov	r1, r8
 8003d72:	008a      	lsls	r2, r1, #2
 8003d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d78:	f7fc ff08 	bl	8000b8c <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4422      	add	r2, r4
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <look2_binlx>:
};
static real_T look2_binlx(real_T u0, real_T u1, const real_T bp0[], const real_T
  bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride);
static real_T look2_binlx(real_T u0, real_T u1, const real_T bp0[], const real_T
  bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride)
{
 8003dbc:	b5b0      	push	{r4, r5, r7, lr}
 8003dbe:	b098      	sub	sp, #96	; 0x60
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	ed87 0b06 	vstr	d0, [r7, #24]
 8003dc6:	ed87 1b04 	vstr	d1, [r7, #16]
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ddc:	f7fc fe90 	bl	8000b00 <__aeabi_dcmple>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <look2_binlx+0x6c>
    iLeft = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003df4:	f7fc fa50 	bl	8000298 <__aeabi_dsub>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3308      	adds	r3, #8
 8003e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fa43 	bl	8000298 <__aeabi_dsub>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc fd1f 	bl	800085c <__aeabi_ddiv>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003e26:	e08e      	b.n	8003f46 <look2_binlx+0x18a>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e3a:	f7fc fe57 	bl	8000aec <__aeabi_dcmplt>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04d      	beq.n	8003ee0 <look2_binlx+0x124>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54
    iLeft = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	653b      	str	r3, [r7, #80]	; 0x50
    iRght = maxIndex[0U];
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (iRght - iLeft > 1U) {
 8003e56:	e016      	b.n	8003e86 <look2_binlx+0xca>
      if (u0 < bp0[bpIdx]) {
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e68:	f7fc fe40 	bl	8000aec <__aeabi_dcmplt>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <look2_binlx+0xbc>
        iRght = bpIdx;
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e76:	e001      	b.n	8003e7c <look2_binlx+0xc0>
      } else {
        iLeft = bpIdx;
 8003e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7a:	653b      	str	r3, [r7, #80]	; 0x50
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8003e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e80:	4413      	add	r3, r2
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	657b      	str	r3, [r7, #84]	; 0x54
    while (iRght - iLeft > 1U) {
 8003e86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d8e3      	bhi.n	8003e58 <look2_binlx+0x9c>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8003e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ea0:	f7fc f9fa 	bl	8000298 <__aeabi_dsub>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eae:	3301      	adds	r3, #1
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc f9e7 	bl	8000298 <__aeabi_dsub>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4620      	mov	r0, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc fcc3 	bl	800085c <__aeabi_ddiv>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003ede:	e032      	b.n	8003f46 <look2_binlx+0x18a>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f00:	f7fc f9ca 	bl	8000298 <__aeabi_dsub>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f22:	3b01      	subs	r3, #1
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc f9b3 	bl	8000298 <__aeabi_dsub>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc fc8f 	bl	800085c <__aeabi_ddiv>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      - 1U]);
  }

  fractions[0U] = frac;
 8003f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIndices[0U] = iLeft;
 8003f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f50:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f5c:	f7fc fdd0 	bl	8000b00 <__aeabi_dcmple>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <look2_binlx+0x1ec>
    iLeft = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f74:	f7fc f990 	bl	8000298 <__aeabi_dsub>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3308      	adds	r3, #8
 8003f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f983 	bl	8000298 <__aeabi_dsub>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fc5f 	bl	800085c <__aeabi_ddiv>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003fa6:	e094      	b.n	80040d2 <look2_binlx+0x316>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fbc:	f7fc fd96 	bl	8000aec <__aeabi_dcmplt>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04e      	beq.n	8004064 <look2_binlx+0x2a8>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
    iLeft = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	653b      	str	r3, [r7, #80]	; 0x50
    iRght = maxIndex[1U];
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (iRght - iLeft > 1U) {
 8003fda:	e016      	b.n	800400a <look2_binlx+0x24e>
      if (u1 < bp1[bpIdx]) {
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fec:	f7fc fd7e 	bl	8000aec <__aeabi_dcmplt>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <look2_binlx+0x240>
        iRght = bpIdx;
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffa:	e001      	b.n	8004000 <look2_binlx+0x244>
      } else {
        iLeft = bpIdx;
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffe:	653b      	str	r3, [r7, #80]	; 0x50
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8004000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004004:	4413      	add	r3, r2
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	657b      	str	r3, [r7, #84]	; 0x54
    while (iRght - iLeft > 1U) {
 800400a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d8e3      	bhi.n	8003fdc <look2_binlx+0x220>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4413      	add	r3, r2
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004024:	f7fc f938 	bl	8000298 <__aeabi_dsub>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004032:	3301      	adds	r3, #1
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4413      	add	r3, r2
 800403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4413      	add	r3, r2
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f7fc f925 	bl	8000298 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc fc01 	bl	800085c <__aeabi_ddiv>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004062:	e036      	b.n	80040d2 <look2_binlx+0x316>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	3304      	adds	r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004078:	3b01      	subs	r3, #1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4413      	add	r3, r2
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004088:	f7fc f906 	bl	8000298 <__aeabi_dsub>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	3304      	adds	r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	4413      	add	r3, r2
 80040a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3304      	adds	r3, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80040ae:	3b01      	subs	r3, #1
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4413      	add	r3, r2
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f7fc f8ed 	bl	8000298 <__aeabi_dsub>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4620      	mov	r0, r4
 80040c4:	4629      	mov	r1, r5
 80040c6:	f7fc fbc9 	bl	800085c <__aeabi_ddiv>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 80040d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040d6:	fb03 f202 	mul.w	r2, r3, r2
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	4413      	add	r3, r2
 80040de:	657b      	str	r3, [r7, #84]	; 0x54
  yL_0d0 = table[bpIdx];
 80040e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  yL_0d0 += (table[bpIdx + 1U] - yL_0d0) * fractions[0U];
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	3301      	adds	r3, #1
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004102:	f7fc f8c9 	bl	8000298 <__aeabi_dsub>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004112:	f7fc fa79 	bl	8000608 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800411e:	f7fc f8bd 	bl	800029c <__adddf3>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  bpIdx += stride;
 800412a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800412c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412e:	4413      	add	r3, r2
 8004130:	657b      	str	r3, [r7, #84]	; 0x54
  yL_0d1 = table[bpIdx];
 8004132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - yL_0d1) * fractions[0U] + yL_0d1) - yL_0d0) *
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	3301      	adds	r3, #1
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004154:	f7fc f8a0 	bl	8000298 <__aeabi_dsub>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004164:	f7fc fa50 	bl	8000608 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004174:	f7fc f892 	bl	800029c <__adddf3>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004184:	f7fc f888 	bl	8000298 <__aeabi_dsub>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004194:	f7fc fa38 	bl	8000608 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
    frac + yL_0d0;
 80041a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041a4:	f7fc f87a 	bl	800029c <__adddf3>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80041b0:	eeb0 0a47 	vmov.f32	s0, s14
 80041b4:	eef0 0a67 	vmov.f32	s1, s15
 80041b8:	3760      	adds	r7, #96	; 0x60
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080041c0 <BatterySOCEstimation_step>:

/* Model step function */
void BatterySOCEstimation_step(void)
{
 80041c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c4:	b0c0      	sub	sp, #256	; 0x100
 80041c6:	af02      	add	r7, sp, #8
  /* Delay: '<S5>/Delay' incorporates:
   *  Constant: '<S5>/Constant1'
   *  Inport: '<Root>/InitialSOC'
   *  SignalConversion generated from: '<S5>/Delay'
   */
  if (rtDW.CoreSubsys[0].icLoad) {
 80041c8:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <BatterySOCEstimation_step+0x244>)
 80041ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <BatterySOCEstimation_step+0x2c>
    rtDW.CoreSubsys[0].Delay_DSTATE[0] = rtU.InitialSOC;
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <BatterySOCEstimation_step+0x248>)
 80041d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80041d8:	498a      	ldr	r1, [pc, #552]	; (8004404 <BatterySOCEstimation_step+0x244>)
 80041da:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rtDW.CoreSubsys[0].Delay_DSTATE[1] = 0.0;
 80041de:	4989      	ldr	r1, [pc, #548]	; (8004404 <BatterySOCEstimation_step+0x244>)
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9c1 2306 	strd	r2, r3, [r1, #24]

  /* Lookup_n-D: '<S6>/2-D Lookup Table dV0' incorporates:
   *  Delay: '<S5>/Delay'
   *  Inport: '<Root>/CellTemp'
   */
  tmp_3 = look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0], rtU.CellTemp,
 80041ec:	4b85      	ldr	r3, [pc, #532]	; (8004404 <BatterySOCEstimation_step+0x244>)
 80041ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80041f2:	4b85      	ldr	r3, [pc, #532]	; (8004408 <BatterySOCEstimation_step+0x248>)
 80041f4:	ed93 6b04 	vldr	d6, [r3, #16]
 80041f8:	2307      	movs	r3, #7
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4b83      	ldr	r3, [pc, #524]	; (800440c <BatterySOCEstimation_step+0x24c>)
 80041fe:	4a84      	ldr	r2, [pc, #528]	; (8004410 <BatterySOCEstimation_step+0x250>)
 8004200:	4984      	ldr	r1, [pc, #528]	; (8004414 <BatterySOCEstimation_step+0x254>)
 8004202:	4885      	ldr	r0, [pc, #532]	; (8004418 <BatterySOCEstimation_step+0x258>)
 8004204:	eeb0 1a46 	vmov.f32	s2, s12
 8004208:	eef0 1a66 	vmov.f32	s3, s13
 800420c:	eeb0 0a47 	vmov.f32	s0, s14
 8004210:	eef0 0a67 	vmov.f32	s1, s15
 8004214:	f7ff fdd2 	bl	8003dbc <look2_binlx>
 8004218:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
                      rtConstP.uDLookupTabledV0_tableData, rtConstP.pooled3, 7U);

  /* SignalConversion generated from: '<S6>/Transpose1' incorporates:
   *  Constant: '<S6>/Constant4'
   */
  rtb_Product3[0] = tmp_3;
 800421c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004220:	e9c7 2308 	strd	r2, r3, [r7, #32]
  rtb_Product3[1] = -1.0;
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	4b7c      	ldr	r3, [pc, #496]	; (800441c <BatterySOCEstimation_step+0x25c>)
 800422a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  /* Lookup_n-D: '<S6>/2-D Lookup Table R1' incorporates:
   *  Delay: '<S5>/Delay'
   *  Inport: '<Root>/CellTemp'
   */
  rtb_ImpAsg_InsertedFor_SOC_at_i = look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE
 800422e:	4b75      	ldr	r3, [pc, #468]	; (8004404 <BatterySOCEstimation_step+0x244>)
 8004230:	ed93 7b04 	vldr	d7, [r3, #16]
 8004234:	4b74      	ldr	r3, [pc, #464]	; (8004408 <BatterySOCEstimation_step+0x248>)
 8004236:	ed93 6b04 	vldr	d6, [r3, #16]
 800423a:	2307      	movs	r3, #7
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	4b73      	ldr	r3, [pc, #460]	; (800440c <BatterySOCEstimation_step+0x24c>)
 8004240:	4a77      	ldr	r2, [pc, #476]	; (8004420 <BatterySOCEstimation_step+0x260>)
 8004242:	4978      	ldr	r1, [pc, #480]	; (8004424 <BatterySOCEstimation_step+0x264>)
 8004244:	4878      	ldr	r0, [pc, #480]	; (8004428 <BatterySOCEstimation_step+0x268>)
 8004246:	eeb0 1a46 	vmov.f32	s2, s12
 800424a:	eef0 1a66 	vmov.f32	s3, s13
 800424e:	eeb0 0a47 	vmov.f32	s0, s14
 8004252:	eef0 0a67 	vmov.f32	s1, s15
 8004256:	f7ff fdb1 	bl	8003dbc <look2_binlx>
 800425a:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
   *  Product: '<S6>/Product2'
   *
   * About '<S6>/Math Function':
   *  Operator: exp
   */
  rtb_MathFunction = exp(1.0 / (rtb_ImpAsg_InsertedFor_SOC_at_i * look2_binlx
 800425e:	4b69      	ldr	r3, [pc, #420]	; (8004404 <BatterySOCEstimation_step+0x244>)
 8004260:	ed93 7b04 	vldr	d7, [r3, #16]
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <BatterySOCEstimation_step+0x248>)
 8004266:	ed93 6b04 	vldr	d6, [r3, #16]
 800426a:	2307      	movs	r3, #7
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <BatterySOCEstimation_step+0x24c>)
 8004270:	4a6e      	ldr	r2, [pc, #440]	; (800442c <BatterySOCEstimation_step+0x26c>)
 8004272:	496f      	ldr	r1, [pc, #444]	; (8004430 <BatterySOCEstimation_step+0x270>)
 8004274:	486f      	ldr	r0, [pc, #444]	; (8004434 <BatterySOCEstimation_step+0x274>)
 8004276:	eeb0 1a46 	vmov.f32	s2, s12
 800427a:	eef0 1a66 	vmov.f32	s3, s13
 800427e:	eeb0 0a47 	vmov.f32	s0, s14
 8004282:	eef0 0a67 	vmov.f32	s1, s15
 8004286:	f7ff fd99 	bl	8003dbc <look2_binlx>
 800428a:	ec51 0b10 	vmov	r0, r1, d0
 800428e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004292:	f7fc f9b9 	bl	8000608 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	4966      	ldr	r1, [pc, #408]	; (8004438 <BatterySOCEstimation_step+0x278>)
 80042a0:	f7fc fadc 	bl	800085c <__aeabi_ddiv>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
    (rtDW.CoreSubsys[0].Delay_DSTATE[0], rtU.CellTemp,
     rtConstP.uDLookupTableC1_bp01Data, rtConstP.uDLookupTableC1_bp02Data,
     rtConstP.uDLookupTableC1_tableData, rtConstP.pooled3, 7U)) *
    -rtDW.CoreSubsys[0].Probe[0]);
 80042ac:	4b55      	ldr	r3, [pc, #340]	; (8004404 <BatterySOCEstimation_step+0x244>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	4614      	mov	r4, r2
 80042b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
  rtb_MathFunction = exp(1.0 / (rtb_ImpAsg_InsertedFor_SOC_at_i * look2_binlx
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	f7fc f9a4 	bl	8000608 <__aeabi_dmul>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	ec43 2b17 	vmov	d7, r2, r3
 80042c8:	eeb0 0a47 	vmov.f32	s0, s14
 80042cc:	eef0 0a67 	vmov.f32	s1, s15
 80042d0:	f001 f882 	bl	80053d8 <exp>
 80042d4:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0

  /* SignalConversion generated from: '<S6>/Assignment' incorporates:
   *  Assignment: '<S6>/Assignment'
   *  Constant: '<S6>/Constant'
   */
  rtb_Assignment[0] = 1.0;
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	4b56      	ldr	r3, [pc, #344]	; (8004438 <BatterySOCEstimation_step+0x278>)
 80042de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  rtb_Assignment[1] = 0.0;
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  rtb_Assignment[2] = 0.0;
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

  /* Assignment: '<S6>/Assignment' */
  rtb_Assignment[3] = rtb_MathFunction;
 80042fa:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80042fe:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  /* Product: '<S7>/Product2' incorporates:
   *  Assignment: '<S6>/Assignment'
   *  Math: '<S7>/Transpose'
   *  UnitDelay: '<S3>/Unit Delay - P'
   */
  for (i = 0; i < 2; i++) {
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004308:	e05e      	b.n	80043c8 <BatterySOCEstimation_step+0x208>
    rtb_Sum_p = rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i + 2];
 800430a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800430e:	3302      	adds	r3, #2
 8004310:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <BatterySOCEstimation_step+0x244>)
 8004312:	3304      	adds	r3, #4
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
    UnitDelayP_DSTATE = rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i];
 8004320:	4a38      	ldr	r2, [pc, #224]	; (8004404 <BatterySOCEstimation_step+0x244>)
 8004322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004326:	3304      	adds	r3, #4
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    tmp[i] = rtb_Sum_p * 0.0 + UnitDelayP_DSTATE;
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004340:	f7fc f962 	bl	8000608 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004350:	f7fb ffa4 	bl	800029c <__adddf3>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800435c:	00c9      	lsls	r1, r1, #3
 800435e:	31e8      	adds	r1, #232	; 0xe8
 8004360:	f107 0010 	add.w	r0, r7, #16
 8004364:	4401      	add	r1, r0
 8004366:	39c8      	subs	r1, #200	; 0xc8
 8004368:	e9c1 2300 	strd	r2, r3, [r1]
    tmp[i + 2] = rtb_Sum_p * rtb_MathFunction + UnitDelayP_DSTATE * 0.0;
 800436c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004370:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004374:	f7fc f948 	bl	8000608 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4690      	mov	r8, r2
 800437e:	4699      	mov	r9, r3
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800438c:	f7fc f93c 	bl	8000608 <__aeabi_dmul>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800439c:	1c9c      	adds	r4, r3, #2
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	f7fb ff79 	bl	800029c <__adddf3>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	00e1      	lsls	r1, r4, #3
 80043b0:	31e8      	adds	r1, #232	; 0xe8
 80043b2:	f107 0010 	add.w	r0, r7, #16
 80043b6:	4401      	add	r1, r0
 80043b8:	39c8      	subs	r1, #200	; 0xc8
 80043ba:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 2; i++) {
 80043be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043c2:	3301      	adds	r3, #1
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	dd9c      	ble.n	800430a <BatterySOCEstimation_step+0x14a>
  }

  /* Product: '<S4>/Product2' */
  rtb_Sum_g_idx_0 = 0.0;
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

  /* Product: '<S7>/Product2' */
  rtb_Sum_p = tmp[1];
 80043dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043e0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  tmp_0 = tmp[0];
 80043e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043e8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  tmp_1 = tmp[3];
 80043ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043f0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  tmp_2 = tmp[2];
 80043f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043f8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (i = 0; i < 2; i++) {
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004402:	e0e7      	b.n	80045d4 <BatterySOCEstimation_step+0x414>
 8004404:	200006a8 	.word	0x200006a8
 8004408:	200006f0 	.word	0x200006f0
 800440c:	20000508 	.word	0x20000508
 8004410:	20000010 	.word	0x20000010
 8004414:	200000f0 	.word	0x200000f0
 8004418:	200000b8 	.word	0x200000b8
 800441c:	bff00000 	.word	0xbff00000
 8004420:	20000108 	.word	0x20000108
 8004424:	200001e8 	.word	0x200001e8
 8004428:	200001b0 	.word	0x200001b0
 800442c:	20000200 	.word	0x20000200
 8004430:	200002e0 	.word	0x200002e0
 8004434:	200002a8 	.word	0x200002a8
 8004438:	3ff00000 	.word	0x3ff00000
    /* Sum: '<S7>/Sum1' incorporates:
     *  Assignment: '<S6>/Assignment'
     *  Constant: '<S7>/Constant'
     *  Product: '<S7>/Product2'
     */
    rtb_Assignment_0 = rtb_Assignment[i + 2];
 800443c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004440:	3302      	adds	r3, #2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	33e8      	adds	r3, #232	; 0xe8
 8004446:	f107 0210 	add.w	r2, r7, #16
 800444a:	4413      	add	r3, r2
 800444c:	3b88      	subs	r3, #136	; 0x88
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    rtb_Assignment_1 = (int32_T)rtb_Assignment[i];
 8004456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	33e8      	adds	r3, #232	; 0xe8
 800445e:	f107 0210 	add.w	r2, r7, #16
 8004462:	4413      	add	r3, r2
 8004464:	3b88      	subs	r3, #136	; 0x88
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f7fc fb65 	bl	8000b3c <__aeabi_d2iz>
 8004472:	4603      	mov	r3, r0
 8004474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    UnitDelayP_DSTATE = (rtb_Assignment_0 * rtb_Sum_p + (real_T)rtb_Assignment_1
 8004478:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800447c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004480:	f7fc f8c2 	bl	8000608 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4614      	mov	r4, r2
 800448a:	461d      	mov	r5, r3
 800448c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004490:	f7fc f850 	bl	8000534 <__aeabi_i2d>
                         * tmp_0) + rtConstP.Constant_Value_n[i];
 8004494:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004498:	f7fc f8b6 	bl	8000608 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
    UnitDelayP_DSTATE = (rtb_Assignment_0 * rtb_Sum_p + (real_T)rtb_Assignment_1
 80044a0:	4620      	mov	r0, r4
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fb fefa 	bl	800029c <__adddf3>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
                         * tmp_0) + rtConstP.Constant_Value_n[i];
 80044b0:	4abd      	ldr	r2, [pc, #756]	; (80047a8 <BatterySOCEstimation_step+0x5e8>)
 80044b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044b6:	335d      	adds	r3, #93	; 0x5d
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    UnitDelayP_DSTATE = (rtb_Assignment_0 * rtb_Sum_p + (real_T)rtb_Assignment_1
 80044c0:	f7fb feec 	bl	800029c <__adddf3>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    rtb_Sum1[i] = UnitDelayP_DSTATE;
 80044cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	33e8      	adds	r3, #232	; 0xe8
 80044d4:	f107 0210 	add.w	r2, r7, #16
 80044d8:	4413      	add	r3, r2
 80044da:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 80044de:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80044e2:	e9c1 2300 	strd	r2, r3, [r1]

    /* Product: '<S4>/Product2' incorporates:
     *  Lookup_n-D: '<S6>/2-D Lookup Table dV0'
     *  Product: '<S4>/Product'
     */
    rtb_TmpSignalConversionAtProd_0 = UnitDelayP_DSTATE * tmp_3;
 80044e6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80044ea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80044ee:	f7fc f88b 	bl	8000608 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

    /* Sum: '<S7>/Sum1' incorporates:
     *  Constant: '<S7>/Constant'
     *  Product: '<S7>/Product2'
     */
    UnitDelayP_DSTATE = (rtb_Assignment_0 * tmp_1 + (real_T)rtb_Assignment_1 *
 80044fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80044fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004502:	f7fc f881 	bl	8000608 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004512:	f7fc f80f 	bl	8000534 <__aeabi_i2d>
 8004516:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800451a:	f7fc f875 	bl	8000608 <__aeabi_dmul>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb feb9 	bl	800029c <__adddf3>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
                         tmp_2) + rtConstP.Constant_Value_n[i + 2];
 8004532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004536:	3302      	adds	r3, #2
 8004538:	4a9b      	ldr	r2, [pc, #620]	; (80047a8 <BatterySOCEstimation_step+0x5e8>)
 800453a:	335d      	adds	r3, #93	; 0x5d
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
    UnitDelayP_DSTATE = (rtb_Assignment_0 * tmp_1 + (real_T)rtb_Assignment_1 *
 8004544:	f7fb feaa 	bl	800029c <__adddf3>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    rtb_Sum1[i + 2] = UnitDelayP_DSTATE;
 8004550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004554:	3302      	adds	r3, #2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	33e8      	adds	r3, #232	; 0xe8
 800455a:	f107 0210 	add.w	r2, r7, #16
 800455e:	4413      	add	r3, r2
 8004560:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8004564:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004568:	e9c1 2300 	strd	r2, r3, [r1]

    /* Product: '<S4>/Product2' incorporates:
     *  Product: '<S4>/Product'
     *  Product: '<S4>/Product3'
     */
    rtb_TmpSignalConversionAtProd_0 -= UnitDelayP_DSTATE;
 800456c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004570:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004574:	f7fb fe90 	bl	8000298 <__aeabi_dsub>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
    rtb_TmpSignalConversionAtProduc[i] = rtb_TmpSignalConversionAtProd_0;
 8004580:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	33e8      	adds	r3, #232	; 0xe8
 8004588:	f107 0210 	add.w	r2, r7, #16
 800458c:	4413      	add	r3, r2
 800458e:	f1a3 01e8 	sub.w	r1, r3, #232	; 0xe8
 8004592:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004596:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Sum_g_idx_0 += rtb_Product3[i] * rtb_TmpSignalConversionAtProd_0;
 800459a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	33e8      	adds	r3, #232	; 0xe8
 80045a2:	f107 0210 	add.w	r2, r7, #16
 80045a6:	4413      	add	r3, r2
 80045a8:	3bd8      	subs	r3, #216	; 0xd8
 80045aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ae:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80045b2:	f7fc f829 	bl	8000608 <__aeabi_dmul>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80045be:	f7fb fe6d 	bl	800029c <__adddf3>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  for (i = 0; i < 2; i++) {
 80045ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045d8:	2b01      	cmp	r3, #1
 80045da:	f77f af2f 	ble.w	800443c <BatterySOCEstimation_step+0x27c>
   *  Constant: '<S4>/Constant'
   *  Constant: '<S4>/Constant1'
   *  Product: '<S4>/Product2'
   *  Sum: '<S4>/Sum2'
   */
  rtb_Sum_p = 1.0 / (rtb_Sum_g_idx_0 + 0.7);
 80045de:	a36e      	add	r3, pc, #440	; (adr r3, 8004798 <BatterySOCEstimation_step+0x5d8>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80045e8:	f7fb fe58 	bl	800029c <__adddf3>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	f04f 0000 	mov.w	r0, #0
 80045f4:	496d      	ldr	r1, [pc, #436]	; (80047ac <BatterySOCEstimation_step+0x5ec>)
 80045f6:	f7fc f931 	bl	800085c <__aeabi_ddiv>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

  /* Product: '<S4>/Product1' incorporates:
   *  Product: '<S4>/Product'
   *  SignalConversion generated from: '<S7>/Product1'
   */
  rtb_TmpSignalConversionAtProduc[0] *= rtb_Sum_p;
 8004602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004606:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800460a:	f7fb fffd 	bl	8000608 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	e9c7 2304 	strd	r2, r3, [r7, #16]
  rtb_TmpSignalConversionAtProduc[1] *= rtb_Sum_p;
 8004616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800461a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800461e:	f7fb fff3 	bl	8000608 <__aeabi_dmul>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	e9c7 2306 	strd	r2, r3, [r7, #24]
   *  Lookup_n-D: '<S6>/2-D Lookup Table R0'
   *  Lookup_n-D: '<S6>/2-D Lookup Table V0'
   *  Product: '<S6>/Product6'
   *  Sum: '<S6>/Sum2'
   */
  rtb_Sum_p = rtU.CellVoltage - ((look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 800462a:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <BatterySOCEstimation_step+0x5f0>)
 800462c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004630:	4b60      	ldr	r3, [pc, #384]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 8004632:	ed93 7b04 	vldr	d7, [r3, #16]
 8004636:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <BatterySOCEstimation_step+0x5f0>)
 8004638:	ed93 6b04 	vldr	d6, [r3, #16]
 800463c:	2307      	movs	r3, #7
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4b5d      	ldr	r3, [pc, #372]	; (80047b8 <BatterySOCEstimation_step+0x5f8>)
 8004642:	4a5e      	ldr	r2, [pc, #376]	; (80047bc <BatterySOCEstimation_step+0x5fc>)
 8004644:	495e      	ldr	r1, [pc, #376]	; (80047c0 <BatterySOCEstimation_step+0x600>)
 8004646:	485f      	ldr	r0, [pc, #380]	; (80047c4 <BatterySOCEstimation_step+0x604>)
 8004648:	eeb0 1a46 	vmov.f32	s2, s12
 800464c:	eef0 1a66 	vmov.f32	s3, s13
 8004650:	eeb0 0a47 	vmov.f32	s0, s14
 8004654:	eef0 0a67 	vmov.f32	s1, s15
 8004658:	f7ff fbb0 	bl	8003dbc <look2_binlx>
 800465c:	ec59 8b10 	vmov	r8, r9, d0
    rtU.CellTemp, rtConstP.uDLookupTableV0_bp01Data,
    rtConstP.uDLookupTableV0_bp02Data, rtConstP.uDLookupTableV0_tableData,
    rtConstP.pooled3, 7U) - look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 8004660:	4b54      	ldr	r3, [pc, #336]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 8004662:	ed93 7b04 	vldr	d7, [r3, #16]
 8004666:	4b52      	ldr	r3, [pc, #328]	; (80047b0 <BatterySOCEstimation_step+0x5f0>)
 8004668:	ed93 6b04 	vldr	d6, [r3, #16]
 800466c:	2307      	movs	r3, #7
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <BatterySOCEstimation_step+0x5f8>)
 8004672:	4a55      	ldr	r2, [pc, #340]	; (80047c8 <BatterySOCEstimation_step+0x608>)
 8004674:	4955      	ldr	r1, [pc, #340]	; (80047cc <BatterySOCEstimation_step+0x60c>)
 8004676:	4856      	ldr	r0, [pc, #344]	; (80047d0 <BatterySOCEstimation_step+0x610>)
 8004678:	eeb0 1a46 	vmov.f32	s2, s12
 800467c:	eef0 1a66 	vmov.f32	s3, s13
 8004680:	eeb0 0a47 	vmov.f32	s0, s14
 8004684:	eef0 0a67 	vmov.f32	s1, s15
 8004688:	f7ff fb98 	bl	8003dbc <look2_binlx>
 800468c:	ec51 0b10 	vmov	r0, r1, d0
    rtU.CellTemp, rtConstP.uDLookupTableR0_bp01Data,
    rtConstP.uDLookupTableR0_bp02Data, rtConstP.uDLookupTableR0_tableData,
    rtConstP.pooled3, 7U) * -rtU.Current) - rtDW.CoreSubsys[0].Delay_DSTATE[1]);
 8004690:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <BatterySOCEstimation_step+0x5f0>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb ffb7 	bl	8000608 <__aeabi_dmul>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
    rtConstP.pooled3, 7U) - look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 800469e:	4640      	mov	r0, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	f7fb fdfb 	bl	800029c <__adddf3>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
    rtConstP.pooled3, 7U) * -rtU.Current) - rtDW.CoreSubsys[0].Delay_DSTATE[1]);
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 80046b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046b4:	f7fb fdf0 	bl	8000298 <__aeabi_dsub>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
  rtb_Sum_p = rtU.CellVoltage - ((look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 80046bc:	4620      	mov	r0, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	f7fb fdea 	bl	8000298 <__aeabi_dsub>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
   *  Product: '<S7>/Product'
   *  Product: '<S7>/Product1'
   *  SignalConversion generated from: '<S7>/Product1'
   *  Sum: '<S7>/Sum'
   */
  rtb_Sum_g_idx_0 = ((rtDW.CoreSubsys[0].Delay_DSTATE[1] * 0.0 +
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 80046ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f7fb ff95 	bl	8000608 <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
                      rtDW.CoreSubsys[0].Delay_DSTATE[0]) + 1.02880658436214E-5 *
 80046e6:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 80046e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  rtb_Sum_g_idx_0 = ((rtDW.CoreSubsys[0].Delay_DSTATE[1] * 0.0 +
 80046ec:	f7fb fdd6 	bl	800029c <__adddf3>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	461d      	mov	r5, r3
                     -rtDW.CoreSubsys[0].Probe[0] * -rtU.Current) +
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	60ba      	str	r2, [r7, #8]
 8004700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004704:	60fb      	str	r3, [r7, #12]
                      rtDW.CoreSubsys[0].Delay_DSTATE[0]) + 1.02880658436214E-5 *
 8004706:	a326      	add	r3, pc, #152	; (adr r3, 80047a0 <BatterySOCEstimation_step+0x5e0>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004710:	f7fb ff7a 	bl	8000608 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
                     -rtDW.CoreSubsys[0].Probe[0] * -rtU.Current) +
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <BatterySOCEstimation_step+0x5f0>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	603a      	str	r2, [r7, #0]
 8004724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472e:	f7fb ff6b 	bl	8000608 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
                      rtDW.CoreSubsys[0].Delay_DSTATE[0]) + 1.02880658436214E-5 *
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fb fdaf 	bl	800029c <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4614      	mov	r4, r2
 8004744:	461d      	mov	r5, r3
    rtb_TmpSignalConversionAtProduc[0] * rtb_Sum_p;
 8004746:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800474a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800474e:	f7fb ff5b 	bl	8000608 <__aeabi_dmul>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
  rtb_Sum_g_idx_0 = ((rtDW.CoreSubsys[0].Delay_DSTATE[1] * 0.0 +
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fb fd9f 	bl	800029c <__adddf3>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

  /* Product: '<S7>/Product' incorporates:
   *  Assignment: '<S6>/Assignment'
   *  Delay: '<S5>/Delay'
   */
  rtb_Assignment_0 = rtDW.CoreSubsys[0].Delay_DSTATE[0] * 0.0 + rtDW.CoreSubsys
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 8004768:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f7fb ff48 	bl	8000608 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
    [0].Delay_DSTATE[1] * rtb_MathFunction;
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <BatterySOCEstimation_step+0x5f4>)
 8004782:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004786:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800478a:	f7fb ff3d 	bl	8000608 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
  rtb_Assignment_0 = rtDW.CoreSubsys[0].Delay_DSTATE[0] * 0.0 + rtDW.CoreSubsys
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	e01d      	b.n	80047d4 <BatterySOCEstimation_step+0x614>
 8004798:	66666666 	.word	0x66666666
 800479c:	3fe66666 	.word	0x3fe66666
 80047a0:	00b76497 	.word	0x00b76497
 80047a4:	3ee5935d 	.word	0x3ee5935d
 80047a8:	20000010 	.word	0x20000010
 80047ac:	3ff00000 	.word	0x3ff00000
 80047b0:	200006f0 	.word	0x200006f0
 80047b4:	200006a8 	.word	0x200006a8
 80047b8:	20000508 	.word	0x20000508
 80047bc:	20000318 	.word	0x20000318
 80047c0:	200003f8 	.word	0x200003f8
 80047c4:	200003c0 	.word	0x200003c0
 80047c8:	20000410 	.word	0x20000410
 80047cc:	200004f0 	.word	0x200004f0
 80047d0:	200004b8 	.word	0x200004b8
 80047d4:	f7fb fd62 	bl	800029c <__adddf3>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

  /* Update for Delay: '<S5>/Delay' */
  rtDW.CoreSubsys[0].icLoad = false;
 80047e0:	4b80      	ldr	r3, [pc, #512]	; (80049e4 <BatterySOCEstimation_step+0x824>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  rtDW.CoreSubsys[0].Delay_DSTATE[0] = rtb_Sum_g_idx_0;
 80047e8:	497e      	ldr	r1, [pc, #504]	; (80049e4 <BatterySOCEstimation_step+0x824>)
 80047ea:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80047ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* Sum: '<S4>/Sum3' incorporates:
   *  Constant: '<S4>/Constant2'
   *  Product: '<S4>/Product4'
   *  SignalConversion generated from: '<S7>/Product1'
   */
  tmp[0] = 1.0 - rtb_TmpSignalConversionAtProduc[0] * tmp_3;
 80047f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047f6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80047fa:	f7fb ff05 	bl	8000608 <__aeabi_dmul>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	4978      	ldr	r1, [pc, #480]	; (80049e8 <BatterySOCEstimation_step+0x828>)
 8004808:	f7fb fd46 	bl	8000298 <__aeabi_dsub>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  tmp[1] = 0.0 - tmp_3 * rtb_TmpSignalConversionAtProduc[1];
 8004814:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004818:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800481c:	f7fb fef4 	bl	8000608 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	f7fb fd34 	bl	8000298 <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   *  SignalConversion generated from: '<S7>/Product1'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S6>/Sum'
   *  Sum: '<S7>/Sum'
   */
  rtDW.CoreSubsys[0].Delay_DSTATE[1] = ((1.0 - rtb_MathFunction) *
 8004838:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	4969      	ldr	r1, [pc, #420]	; (80049e8 <BatterySOCEstimation_step+0x828>)
 8004842:	f7fb fd29 	bl	8000298 <__aeabi_dsub>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004852:	f7fb fed9 	bl	8000608 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
    rtb_ImpAsg_InsertedFor_SOC_at_i * -rtU.Current + rtb_Assignment_0) +
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <BatterySOCEstimation_step+0x82c>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	4692      	mov	sl, r2
 8004866:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800486a:	4652      	mov	r2, sl
 800486c:	465b      	mov	r3, fp
 800486e:	f7fb fecb 	bl	8000608 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800487e:	f7fb fd0d 	bl	800029c <__adddf3>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4614      	mov	r4, r2
 8004888:	461d      	mov	r5, r3
    rtb_TmpSignalConversionAtProduc[1] * rtb_Sum_p;
 800488a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800488e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8004892:	f7fb feb9 	bl	8000608 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
    rtb_ImpAsg_InsertedFor_SOC_at_i * -rtU.Current + rtb_Assignment_0) +
 800489a:	4620      	mov	r0, r4
 800489c:	4629      	mov	r1, r5
 800489e:	f7fb fcfd 	bl	800029c <__adddf3>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
  rtDW.CoreSubsys[0].Delay_DSTATE[1] = ((1.0 - rtb_MathFunction) *
 80048a6:	494f      	ldr	r1, [pc, #316]	; (80049e4 <BatterySOCEstimation_step+0x824>)
 80048a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
  /* Sum: '<S4>/Sum3' incorporates:
   *  Constant: '<S4>/Constant2'
   *  Product: '<S4>/Product4'
   *  SignalConversion generated from: '<S7>/Product1'
   */
  tmp[2] = 0.0 - (-rtb_TmpSignalConversionAtProduc[0]);
 80048ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	f7fb fcf0 	bl	800029c <__adddf3>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  tmp[3] = 1.0 - (-rtb_TmpSignalConversionAtProduc[1]);
 80048c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	4b46      	ldr	r3, [pc, #280]	; (80049e8 <BatterySOCEstimation_step+0x828>)
 80048ce:	f7fb fce5 	bl	800029c <__adddf3>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  /* Product: '<S4>/Product5' incorporates:
   *  Sum: '<S7>/Sum1'
   */
  UnitDelayP_DSTATE = rtb_Sum1[0];
 80048da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048de:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  rtb_ImpAsg_InsertedFor_SOC_at_i = rtb_Sum1[1];
 80048e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e6:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  rtb_MathFunction = rtb_Sum1[2];
 80048ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048ee:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  rtb_Assignment_0 = rtb_Sum1[3];
 80048f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80048f6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

  /* Update for UnitDelay: '<S3>/Unit Delay - P' */
  for (i = 0; i < 2; i++) {
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004900:	e062      	b.n	80049c8 <BatterySOCEstimation_step+0x808>
    /* Product: '<S4>/Product5' */
    tmp_3 = tmp[i];
 8004902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	33e8      	adds	r3, #232	; 0xe8
 800490a:	f107 0210 	add.w	r2, r7, #16
 800490e:	4413      	add	r3, r2
 8004910:	3bc8      	subs	r3, #200	; 0xc8
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
    rtb_Sum_p = tmp[i + 2];
 800491a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800491e:	3302      	adds	r3, #2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	33e8      	adds	r3, #232	; 0xe8
 8004924:	f107 0210 	add.w	r2, r7, #16
 8004928:	4413      	add	r3, r2
 800492a:	3bc8      	subs	r3, #200	; 0xc8
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
    rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i] = rtb_Sum_p *
 8004934:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004938:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800493c:	f7fb fe64 	bl	8000608 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
      rtb_ImpAsg_InsertedFor_SOC_at_i + tmp_3 * UnitDelayP_DSTATE;
 8004948:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800494c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004950:	f7fb fe5a 	bl	8000608 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4620      	mov	r0, r4
 800495a:	4629      	mov	r1, r5
 800495c:	f7fb fc9e 	bl	800029c <__adddf3>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
    rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i] = rtb_Sum_p *
 8004964:	481f      	ldr	r0, [pc, #124]	; (80049e4 <BatterySOCEstimation_step+0x824>)
 8004966:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800496a:	3104      	adds	r1, #4
 800496c:	00c9      	lsls	r1, r1, #3
 800496e:	4401      	add	r1, r0
 8004970:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i + 2] = rtb_Sum_p * rtb_Assignment_0 +
 8004974:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004978:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800497c:	f7fb fe44 	bl	8000608 <__aeabi_dmul>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4690      	mov	r8, r2
 8004986:	4699      	mov	r9, r3
      tmp_3 * rtb_MathFunction;
 8004988:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800498c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004990:	f7fb fe3a 	bl	8000608 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
    rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i + 2] = rtb_Sum_p * rtb_Assignment_0 +
 800499c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049a0:	1c9c      	adds	r4, r3, #2
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4640      	mov	r0, r8
 80049a8:	4649      	mov	r1, r9
 80049aa:	f7fb fc77 	bl	800029c <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	480c      	ldr	r0, [pc, #48]	; (80049e4 <BatterySOCEstimation_step+0x824>)
 80049b4:	1d21      	adds	r1, r4, #4
 80049b6:	00c9      	lsls	r1, r1, #3
 80049b8:	4401      	add	r1, r0
 80049ba:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 2; i++) {
 80049be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049c2:	3301      	adds	r3, #1
 80049c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80049c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	dd98      	ble.n	8004902 <BatterySOCEstimation_step+0x742>
  /* End of Update for UnitDelay: '<S3>/Unit Delay - P' */

  /* Outport: '<Root>/Out1' incorporates:
   *  ForEachSliceAssignment generated from: '<S1>/SOC'
   */
  rtY.Out1 = rtb_Sum_g_idx_0;
 80049d0:	4907      	ldr	r1, [pc, #28]	; (80049f0 <BatterySOCEstimation_step+0x830>)
 80049d2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80049d6:	e9c1 2300 	strd	r2, r3, [r1]

  /* End of Outputs for SubSystem: '<Root>/SOC Estimator (Kalman Filter)' */
}
 80049da:	bf00      	nop
 80049dc:	37f8      	adds	r7, #248	; 0xf8
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e4:	200006a8 	.word	0x200006a8
 80049e8:	3ff00000 	.word	0x3ff00000
 80049ec:	200006f0 	.word	0x200006f0
 80049f0:	20000710 	.word	0x20000710
 80049f4:	00000000 	.word	0x00000000

080049f8 <BatterySOCEstimation_initialize>:

/* Model initialize function */
void BatterySOCEstimation_initialize(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* SystemInitialize for Iterator SubSystem: '<Root>/SOC Estimator (Kalman Filter)' */
  /* Start for Probe: '<S6>/Probe' */
  rtDW.CoreSubsys[0].Probe[0] = 1.0;
 80049fc:	491a      	ldr	r1, [pc, #104]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <BatterySOCEstimation_initialize+0x74>)
 8004a04:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.CoreSubsys[0].Probe[1] = 0.0;
 8004a08:	4917      	ldr	r1, [pc, #92]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* InitializeConditions for Delay: '<S5>/Delay' */
  rtDW.CoreSubsys[0].icLoad = true;
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* InitializeConditions for UnitDelay: '<S3>/Unit Delay - P' */
  rtDW.CoreSubsys[0].UnitDelayP_DSTATE[0] = 1.0E-5;
 8004a1e:	4912      	ldr	r1, [pc, #72]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a20:	a30f      	add	r3, pc, #60	; (adr r3, 8004a60 <BatterySOCEstimation_initialize+0x68>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtDW.CoreSubsys[0].UnitDelayP_DSTATE[1] = 0.0;
 8004a2a:	490f      	ldr	r1, [pc, #60]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  rtDW.CoreSubsys[0].UnitDelayP_DSTATE[2] = 0.0;
 8004a38:	490b      	ldr	r1, [pc, #44]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  rtDW.CoreSubsys[0].UnitDelayP_DSTATE[3] = 1.0;
 8004a46:	4908      	ldr	r1, [pc, #32]	; (8004a68 <BatterySOCEstimation_initialize+0x70>)
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <BatterySOCEstimation_initialize+0x74>)
 8004a4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  /* End of SystemInitialize for SubSystem: '<Root>/SOC Estimator (Kalman Filter)' */
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	f3af 8000 	nop.w
 8004a60:	88e368f1 	.word	0x88e368f1
 8004a64:	3ee4f8b5 	.word	0x3ee4f8b5
 8004a68:	200006a8 	.word	0x200006a8
 8004a6c:	3ff00000 	.word	0x3ff00000

08004a70 <__errno>:
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <__errno+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000510 	.word	0x20000510

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4d0d      	ldr	r5, [pc, #52]	; (8004ab4 <__libc_init_array+0x38>)
 8004a80:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	2600      	movs	r6, #0
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	4d0b      	ldr	r5, [pc, #44]	; (8004abc <__libc_init_array+0x40>)
 8004a8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ac0 <__libc_init_array+0x44>)
 8004a90:	f000 fea8 	bl	80057e4 <_init>
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	2600      	movs	r6, #0
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	080058b8 	.word	0x080058b8
 8004ab8:	080058b8 	.word	0x080058b8
 8004abc:	080058b8 	.word	0x080058b8
 8004ac0:	080058bc 	.word	0x080058bc

08004ac4 <memset>:
 8004ac4:	4402      	add	r2, r0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d100      	bne.n	8004ace <memset+0xa>
 8004acc:	4770      	bx	lr
 8004ace:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad2:	e7f9      	b.n	8004ac8 <memset+0x4>

08004ad4 <sniprintf>:
 8004ad4:	b40c      	push	{r2, r3}
 8004ad6:	b530      	push	{r4, r5, lr}
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <sniprintf+0x64>)
 8004ada:	1e0c      	subs	r4, r1, #0
 8004adc:	681d      	ldr	r5, [r3, #0]
 8004ade:	b09d      	sub	sp, #116	; 0x74
 8004ae0:	da08      	bge.n	8004af4 <sniprintf+0x20>
 8004ae2:	238b      	movs	r3, #139	; 0x8b
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aea:	b01d      	add	sp, #116	; 0x74
 8004aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af0:	b002      	add	sp, #8
 8004af2:	4770      	bx	lr
 8004af4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004afc:	bf14      	ite	ne
 8004afe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004b02:	4623      	moveq	r3, r4
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	9307      	str	r3, [sp, #28]
 8004b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b0c:	9002      	str	r0, [sp, #8]
 8004b0e:	9006      	str	r0, [sp, #24]
 8004b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b16:	ab21      	add	r3, sp, #132	; 0x84
 8004b18:	a902      	add	r1, sp, #8
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f000 f869 	bl	8004bf4 <_svfiprintf_r>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	bfbc      	itt	lt
 8004b26:	238b      	movlt	r3, #139	; 0x8b
 8004b28:	602b      	strlt	r3, [r5, #0]
 8004b2a:	2c00      	cmp	r4, #0
 8004b2c:	d0dd      	beq.n	8004aea <sniprintf+0x16>
 8004b2e:	9b02      	ldr	r3, [sp, #8]
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e7d9      	b.n	8004aea <sniprintf+0x16>
 8004b36:	bf00      	nop
 8004b38:	20000510 	.word	0x20000510

08004b3c <__ssputs_r>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	688e      	ldr	r6, [r1, #8]
 8004b42:	429e      	cmp	r6, r3
 8004b44:	4682      	mov	sl, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	4690      	mov	r8, r2
 8004b4a:	461f      	mov	r7, r3
 8004b4c:	d838      	bhi.n	8004bc0 <__ssputs_r+0x84>
 8004b4e:	898a      	ldrh	r2, [r1, #12]
 8004b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b54:	d032      	beq.n	8004bbc <__ssputs_r+0x80>
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	6909      	ldr	r1, [r1, #16]
 8004b5a:	eba5 0901 	sub.w	r9, r5, r1
 8004b5e:	6965      	ldr	r5, [r4, #20]
 8004b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b68:	3301      	adds	r3, #1
 8004b6a:	444b      	add	r3, r9
 8004b6c:	106d      	asrs	r5, r5, #1
 8004b6e:	429d      	cmp	r5, r3
 8004b70:	bf38      	it	cc
 8004b72:	461d      	movcc	r5, r3
 8004b74:	0553      	lsls	r3, r2, #21
 8004b76:	d531      	bpl.n	8004bdc <__ssputs_r+0xa0>
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f000 fb63 	bl	8005244 <_malloc_r>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	b950      	cbnz	r0, 8004b98 <__ssputs_r+0x5c>
 8004b82:	230c      	movs	r3, #12
 8004b84:	f8ca 3000 	str.w	r3, [sl]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	6921      	ldr	r1, [r4, #16]
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	f000 fabe 	bl	800511c <memcpy>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	6126      	str	r6, [r4, #16]
 8004bae:	6165      	str	r5, [r4, #20]
 8004bb0:	444e      	add	r6, r9
 8004bb2:	eba5 0509 	sub.w	r5, r5, r9
 8004bb6:	6026      	str	r6, [r4, #0]
 8004bb8:	60a5      	str	r5, [r4, #8]
 8004bba:	463e      	mov	r6, r7
 8004bbc:	42be      	cmp	r6, r7
 8004bbe:	d900      	bls.n	8004bc2 <__ssputs_r+0x86>
 8004bc0:	463e      	mov	r6, r7
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	f000 fab6 	bl	8005138 <memmove>
 8004bcc:	68a3      	ldr	r3, [r4, #8]
 8004bce:	1b9b      	subs	r3, r3, r6
 8004bd0:	60a3      	str	r3, [r4, #8]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	4433      	add	r3, r6
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e7db      	b.n	8004b94 <__ssputs_r+0x58>
 8004bdc:	462a      	mov	r2, r5
 8004bde:	f000 fba5 	bl	800532c <_realloc_r>
 8004be2:	4606      	mov	r6, r0
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1e1      	bne.n	8004bac <__ssputs_r+0x70>
 8004be8:	6921      	ldr	r1, [r4, #16]
 8004bea:	4650      	mov	r0, sl
 8004bec:	f000 fabe 	bl	800516c <_free_r>
 8004bf0:	e7c7      	b.n	8004b82 <__ssputs_r+0x46>
	...

08004bf4 <_svfiprintf_r>:
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	898b      	ldrh	r3, [r1, #12]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	b09d      	sub	sp, #116	; 0x74
 8004c00:	4607      	mov	r7, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	d50e      	bpl.n	8004c26 <_svfiprintf_r+0x32>
 8004c08:	690b      	ldr	r3, [r1, #16]
 8004c0a:	b963      	cbnz	r3, 8004c26 <_svfiprintf_r+0x32>
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	f000 fb19 	bl	8005244 <_malloc_r>
 8004c12:	6028      	str	r0, [r5, #0]
 8004c14:	6128      	str	r0, [r5, #16]
 8004c16:	b920      	cbnz	r0, 8004c22 <_svfiprintf_r+0x2e>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c20:	e0d1      	b.n	8004dc6 <_svfiprintf_r+0x1d2>
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	616b      	str	r3, [r5, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c34:	2330      	movs	r3, #48	; 0x30
 8004c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004de0 <_svfiprintf_r+0x1ec>
 8004c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c3e:	f04f 0901 	mov.w	r9, #1
 8004c42:	4623      	mov	r3, r4
 8004c44:	469a      	mov	sl, r3
 8004c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c4a:	b10a      	cbz	r2, 8004c50 <_svfiprintf_r+0x5c>
 8004c4c:	2a25      	cmp	r2, #37	; 0x25
 8004c4e:	d1f9      	bne.n	8004c44 <_svfiprintf_r+0x50>
 8004c50:	ebba 0b04 	subs.w	fp, sl, r4
 8004c54:	d00b      	beq.n	8004c6e <_svfiprintf_r+0x7a>
 8004c56:	465b      	mov	r3, fp
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f7ff ff6d 	bl	8004b3c <__ssputs_r>
 8004c62:	3001      	adds	r0, #1
 8004c64:	f000 80aa 	beq.w	8004dbc <_svfiprintf_r+0x1c8>
 8004c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6a:	445a      	add	r2, fp
 8004c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a2 	beq.w	8004dbc <_svfiprintf_r+0x1c8>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c82:	f10a 0a01 	add.w	sl, sl, #1
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c90:	4654      	mov	r4, sl
 8004c92:	2205      	movs	r2, #5
 8004c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c98:	4851      	ldr	r0, [pc, #324]	; (8004de0 <_svfiprintf_r+0x1ec>)
 8004c9a:	f7fb faa9 	bl	80001f0 <memchr>
 8004c9e:	9a04      	ldr	r2, [sp, #16]
 8004ca0:	b9d8      	cbnz	r0, 8004cda <_svfiprintf_r+0xe6>
 8004ca2:	06d0      	lsls	r0, r2, #27
 8004ca4:	bf44      	itt	mi
 8004ca6:	2320      	movmi	r3, #32
 8004ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cac:	0711      	lsls	r1, r2, #28
 8004cae:	bf44      	itt	mi
 8004cb0:	232b      	movmi	r3, #43	; 0x2b
 8004cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cba:	2b2a      	cmp	r3, #42	; 0x2a
 8004cbc:	d015      	beq.n	8004cea <_svfiprintf_r+0xf6>
 8004cbe:	9a07      	ldr	r2, [sp, #28]
 8004cc0:	4654      	mov	r4, sl
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	4621      	mov	r1, r4
 8004cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cce:	3b30      	subs	r3, #48	; 0x30
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	d94e      	bls.n	8004d72 <_svfiprintf_r+0x17e>
 8004cd4:	b1b0      	cbz	r0, 8004d04 <_svfiprintf_r+0x110>
 8004cd6:	9207      	str	r2, [sp, #28]
 8004cd8:	e014      	b.n	8004d04 <_svfiprintf_r+0x110>
 8004cda:	eba0 0308 	sub.w	r3, r0, r8
 8004cde:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	9304      	str	r3, [sp, #16]
 8004ce6:	46a2      	mov	sl, r4
 8004ce8:	e7d2      	b.n	8004c90 <_svfiprintf_r+0x9c>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	1d19      	adds	r1, r3, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	9103      	str	r1, [sp, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bfbb      	ittet	lt
 8004cf6:	425b      	neglt	r3, r3
 8004cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cfc:	9307      	strge	r3, [sp, #28]
 8004cfe:	9307      	strlt	r3, [sp, #28]
 8004d00:	bfb8      	it	lt
 8004d02:	9204      	strlt	r2, [sp, #16]
 8004d04:	7823      	ldrb	r3, [r4, #0]
 8004d06:	2b2e      	cmp	r3, #46	; 0x2e
 8004d08:	d10c      	bne.n	8004d24 <_svfiprintf_r+0x130>
 8004d0a:	7863      	ldrb	r3, [r4, #1]
 8004d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0e:	d135      	bne.n	8004d7c <_svfiprintf_r+0x188>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	9203      	str	r2, [sp, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfb8      	it	lt
 8004d1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d20:	3402      	adds	r4, #2
 8004d22:	9305      	str	r3, [sp, #20]
 8004d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004df0 <_svfiprintf_r+0x1fc>
 8004d28:	7821      	ldrb	r1, [r4, #0]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	4650      	mov	r0, sl
 8004d2e:	f7fb fa5f 	bl	80001f0 <memchr>
 8004d32:	b140      	cbz	r0, 8004d46 <_svfiprintf_r+0x152>
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	eba0 000a 	sub.w	r0, r0, sl
 8004d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	4303      	orrs	r3, r0
 8004d42:	3401      	adds	r4, #1
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	4826      	ldr	r0, [pc, #152]	; (8004de4 <_svfiprintf_r+0x1f0>)
 8004d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d50:	2206      	movs	r2, #6
 8004d52:	f7fb fa4d 	bl	80001f0 <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d038      	beq.n	8004dcc <_svfiprintf_r+0x1d8>
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <_svfiprintf_r+0x1f4>)
 8004d5c:	bb1b      	cbnz	r3, 8004da6 <_svfiprintf_r+0x1b2>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	3308      	adds	r3, #8
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	4433      	add	r3, r6
 8004d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d70:	e767      	b.n	8004c42 <_svfiprintf_r+0x4e>
 8004d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d76:	460c      	mov	r4, r1
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7a5      	b.n	8004cc8 <_svfiprintf_r+0xd4>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8e:	3a30      	subs	r2, #48	; 0x30
 8004d90:	2a09      	cmp	r2, #9
 8004d92:	d903      	bls.n	8004d9c <_svfiprintf_r+0x1a8>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0c5      	beq.n	8004d24 <_svfiprintf_r+0x130>
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	e7c3      	b.n	8004d24 <_svfiprintf_r+0x130>
 8004d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da0:	4604      	mov	r4, r0
 8004da2:	2301      	movs	r3, #1
 8004da4:	e7f0      	b.n	8004d88 <_svfiprintf_r+0x194>
 8004da6:	ab03      	add	r3, sp, #12
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <_svfiprintf_r+0x1f8>)
 8004dae:	a904      	add	r1, sp, #16
 8004db0:	4638      	mov	r0, r7
 8004db2:	f3af 8000 	nop.w
 8004db6:	1c42      	adds	r2, r0, #1
 8004db8:	4606      	mov	r6, r0
 8004dba:	d1d6      	bne.n	8004d6a <_svfiprintf_r+0x176>
 8004dbc:	89ab      	ldrh	r3, [r5, #12]
 8004dbe:	065b      	lsls	r3, r3, #25
 8004dc0:	f53f af2c 	bmi.w	8004c1c <_svfiprintf_r+0x28>
 8004dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc6:	b01d      	add	sp, #116	; 0x74
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <_svfiprintf_r+0x1f8>)
 8004dd4:	a904      	add	r1, sp, #16
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f000 f87a 	bl	8004ed0 <_printf_i>
 8004ddc:	e7eb      	b.n	8004db6 <_svfiprintf_r+0x1c2>
 8004dde:	bf00      	nop
 8004de0:	08005848 	.word	0x08005848
 8004de4:	08005852 	.word	0x08005852
 8004de8:	00000000 	.word	0x00000000
 8004dec:	08004b3d 	.word	0x08004b3d
 8004df0:	0800584e 	.word	0x0800584e

08004df4 <_printf_common>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	4616      	mov	r6, r2
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfb8      	it	lt
 8004e08:	4613      	movlt	r3, r2
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e10:	4607      	mov	r7, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	b10a      	cbz	r2, 8004e1a <_printf_common+0x26>
 8004e16:	3301      	adds	r3, #1
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	0699      	lsls	r1, r3, #26
 8004e1e:	bf42      	ittt	mi
 8004e20:	6833      	ldrmi	r3, [r6, #0]
 8004e22:	3302      	addmi	r3, #2
 8004e24:	6033      	strmi	r3, [r6, #0]
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	f015 0506 	ands.w	r5, r5, #6
 8004e2c:	d106      	bne.n	8004e3c <_printf_common+0x48>
 8004e2e:	f104 0a19 	add.w	sl, r4, #25
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	6832      	ldr	r2, [r6, #0]
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	dc26      	bgt.n	8004e8a <_printf_common+0x96>
 8004e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e40:	1e13      	subs	r3, r2, #0
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	bf18      	it	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	0692      	lsls	r2, r2, #26
 8004e4a:	d42b      	bmi.n	8004ea4 <_printf_common+0xb0>
 8004e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d01e      	beq.n	8004e98 <_printf_common+0xa4>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	68e5      	ldr	r5, [r4, #12]
 8004e5e:	6832      	ldr	r2, [r6, #0]
 8004e60:	f003 0306 	and.w	r3, r3, #6
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	bf08      	it	eq
 8004e68:	1aad      	subeq	r5, r5, r2
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	bf0c      	ite	eq
 8004e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e74:	2500      	movne	r5, #0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bfc4      	itt	gt
 8004e7a:	1a9b      	subgt	r3, r3, r2
 8004e7c:	18ed      	addgt	r5, r5, r3
 8004e7e:	2600      	movs	r6, #0
 8004e80:	341a      	adds	r4, #26
 8004e82:	42b5      	cmp	r5, r6
 8004e84:	d11a      	bne.n	8004ebc <_printf_common+0xc8>
 8004e86:	2000      	movs	r0, #0
 8004e88:	e008      	b.n	8004e9c <_printf_common+0xa8>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4638      	mov	r0, r7
 8004e92:	47c0      	blx	r8
 8004e94:	3001      	adds	r0, #1
 8004e96:	d103      	bne.n	8004ea0 <_printf_common+0xac>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	e7c6      	b.n	8004e32 <_printf_common+0x3e>
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	2030      	movs	r0, #48	; 0x30
 8004eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eae:	4422      	add	r2, r4
 8004eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb8:	3302      	adds	r3, #2
 8004eba:	e7c7      	b.n	8004e4c <_printf_common+0x58>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d0e6      	beq.n	8004e98 <_printf_common+0xa4>
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7d9      	b.n	8004e82 <_printf_common+0x8e>
	...

08004ed0 <_printf_i>:
 8004ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	7e0f      	ldrb	r7, [r1, #24]
 8004ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed8:	2f78      	cmp	r7, #120	; 0x78
 8004eda:	4691      	mov	r9, r2
 8004edc:	4680      	mov	r8, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee6:	d807      	bhi.n	8004ef8 <_printf_i+0x28>
 8004ee8:	2f62      	cmp	r7, #98	; 0x62
 8004eea:	d80a      	bhi.n	8004f02 <_printf_i+0x32>
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f000 80d8 	beq.w	80050a2 <_printf_i+0x1d2>
 8004ef2:	2f58      	cmp	r7, #88	; 0x58
 8004ef4:	f000 80a3 	beq.w	800503e <_printf_i+0x16e>
 8004ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f00:	e03a      	b.n	8004f78 <_printf_i+0xa8>
 8004f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f06:	2b15      	cmp	r3, #21
 8004f08:	d8f6      	bhi.n	8004ef8 <_printf_i+0x28>
 8004f0a:	a101      	add	r1, pc, #4	; (adr r1, 8004f10 <_printf_i+0x40>)
 8004f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f7d 	.word	0x08004f7d
 8004f18:	08004ef9 	.word	0x08004ef9
 8004f1c:	08004ef9 	.word	0x08004ef9
 8004f20:	08004ef9 	.word	0x08004ef9
 8004f24:	08004ef9 	.word	0x08004ef9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ef9 	.word	0x08004ef9
 8004f30:	08004ef9 	.word	0x08004ef9
 8004f34:	08004ef9 	.word	0x08004ef9
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08005089 	.word	0x08005089
 8004f40:	08004fad 	.word	0x08004fad
 8004f44:	0800506b 	.word	0x0800506b
 8004f48:	08004ef9 	.word	0x08004ef9
 8004f4c:	08004ef9 	.word	0x08004ef9
 8004f50:	080050ab 	.word	0x080050ab
 8004f54:	08004ef9 	.word	0x08004ef9
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004ef9 	.word	0x08004ef9
 8004f60:	08004ef9 	.word	0x08004ef9
 8004f64:	08005073 	.word	0x08005073
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0a3      	b.n	80050c4 <_printf_i+0x1f4>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	6829      	ldr	r1, [r5, #0]
 8004f80:	0606      	lsls	r6, r0, #24
 8004f82:	f101 0304 	add.w	r3, r1, #4
 8004f86:	d50a      	bpl.n	8004f9e <_printf_i+0xce>
 8004f88:	680e      	ldr	r6, [r1, #0]
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	da03      	bge.n	8004f98 <_printf_i+0xc8>
 8004f90:	232d      	movs	r3, #45	; 0x2d
 8004f92:	4276      	negs	r6, r6
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	485e      	ldr	r0, [pc, #376]	; (8005114 <_printf_i+0x244>)
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e019      	b.n	8004fd2 <_printf_i+0x102>
 8004f9e:	680e      	ldr	r6, [r1, #0]
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa6:	bf18      	it	ne
 8004fa8:	b236      	sxthne	r6, r6
 8004faa:	e7ef      	b.n	8004f8c <_printf_i+0xbc>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	6029      	str	r1, [r5, #0]
 8004fb4:	0601      	lsls	r1, r0, #24
 8004fb6:	d501      	bpl.n	8004fbc <_printf_i+0xec>
 8004fb8:	681e      	ldr	r6, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <_printf_i+0xf2>
 8004fbc:	0646      	lsls	r6, r0, #25
 8004fbe:	d5fb      	bpl.n	8004fb8 <_printf_i+0xe8>
 8004fc0:	881e      	ldrh	r6, [r3, #0]
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_printf_i+0x244>)
 8004fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2308      	moveq	r3, #8
 8004fca:	230a      	movne	r3, #10
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd2:	6865      	ldr	r5, [r4, #4]
 8004fd4:	60a5      	str	r5, [r4, #8]
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	bfa2      	ittt	ge
 8004fda:	6821      	ldrge	r1, [r4, #0]
 8004fdc:	f021 0104 	bicge.w	r1, r1, #4
 8004fe0:	6021      	strge	r1, [r4, #0]
 8004fe2:	b90e      	cbnz	r6, 8004fe8 <_printf_i+0x118>
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	d04d      	beq.n	8005084 <_printf_i+0x1b4>
 8004fe8:	4615      	mov	r5, r2
 8004fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fee:	fb03 6711 	mls	r7, r3, r1, r6
 8004ff2:	5dc7      	ldrb	r7, [r0, r7]
 8004ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff8:	4637      	mov	r7, r6
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	460e      	mov	r6, r1
 8004ffe:	d9f4      	bls.n	8004fea <_printf_i+0x11a>
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10b      	bne.n	800501c <_printf_i+0x14c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07de      	lsls	r6, r3, #31
 8005008:	d508      	bpl.n	800501c <_printf_i+0x14c>
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	4299      	cmp	r1, r3
 8005010:	bfde      	ittt	le
 8005012:	2330      	movle	r3, #48	; 0x30
 8005014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005018:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800501c:	1b52      	subs	r2, r2, r5
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	f8cd a000 	str.w	sl, [sp]
 8005024:	464b      	mov	r3, r9
 8005026:	aa03      	add	r2, sp, #12
 8005028:	4621      	mov	r1, r4
 800502a:	4640      	mov	r0, r8
 800502c:	f7ff fee2 	bl	8004df4 <_printf_common>
 8005030:	3001      	adds	r0, #1
 8005032:	d14c      	bne.n	80050ce <_printf_i+0x1fe>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005038:	b004      	add	sp, #16
 800503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503e:	4835      	ldr	r0, [pc, #212]	; (8005114 <_printf_i+0x244>)
 8005040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005044:	6829      	ldr	r1, [r5, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f851 6b04 	ldr.w	r6, [r1], #4
 800504c:	6029      	str	r1, [r5, #0]
 800504e:	061d      	lsls	r5, r3, #24
 8005050:	d514      	bpl.n	800507c <_printf_i+0x1ac>
 8005052:	07df      	lsls	r7, r3, #31
 8005054:	bf44      	itt	mi
 8005056:	f043 0320 	orrmi.w	r3, r3, #32
 800505a:	6023      	strmi	r3, [r4, #0]
 800505c:	b91e      	cbnz	r6, 8005066 <_printf_i+0x196>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f023 0320 	bic.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	2310      	movs	r3, #16
 8005068:	e7b0      	b.n	8004fcc <_printf_i+0xfc>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2378      	movs	r3, #120	; 0x78
 8005074:	4828      	ldr	r0, [pc, #160]	; (8005118 <_printf_i+0x248>)
 8005076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507a:	e7e3      	b.n	8005044 <_printf_i+0x174>
 800507c:	0659      	lsls	r1, r3, #25
 800507e:	bf48      	it	mi
 8005080:	b2b6      	uxthmi	r6, r6
 8005082:	e7e6      	b.n	8005052 <_printf_i+0x182>
 8005084:	4615      	mov	r5, r2
 8005086:	e7bb      	b.n	8005000 <_printf_i+0x130>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6826      	ldr	r6, [r4, #0]
 800508c:	6961      	ldr	r1, [r4, #20]
 800508e:	1d18      	adds	r0, r3, #4
 8005090:	6028      	str	r0, [r5, #0]
 8005092:	0635      	lsls	r5, r6, #24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	d501      	bpl.n	800509c <_printf_i+0x1cc>
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0x1d2>
 800509c:	0670      	lsls	r0, r6, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0x1c8>
 80050a0:	8019      	strh	r1, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	4615      	mov	r5, r2
 80050a8:	e7ba      	b.n	8005020 <_printf_i+0x150>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7fb f89a 	bl	80001f0 <memchr>
 80050bc:	b108      	cbz	r0, 80050c2 <_printf_i+0x1f2>
 80050be:	1b40      	subs	r0, r0, r5
 80050c0:	6060      	str	r0, [r4, #4]
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	2300      	movs	r3, #0
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	e7a8      	b.n	8005020 <_printf_i+0x150>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d0ab      	beq.n	8005034 <_printf_i+0x164>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	079b      	lsls	r3, r3, #30
 80050e0:	d413      	bmi.n	800510a <_printf_i+0x23a>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e7a4      	b.n	8005038 <_printf_i+0x168>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	47d0      	blx	sl
 80050f8:	3001      	adds	r0, #1
 80050fa:	d09b      	beq.n	8005034 <_printf_i+0x164>
 80050fc:	3501      	adds	r5, #1
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	9903      	ldr	r1, [sp, #12]
 8005102:	1a5b      	subs	r3, r3, r1
 8005104:	42ab      	cmp	r3, r5
 8005106:	dcf2      	bgt.n	80050ee <_printf_i+0x21e>
 8005108:	e7eb      	b.n	80050e2 <_printf_i+0x212>
 800510a:	2500      	movs	r5, #0
 800510c:	f104 0619 	add.w	r6, r4, #25
 8005110:	e7f5      	b.n	80050fe <_printf_i+0x22e>
 8005112:	bf00      	nop
 8005114:	08005859 	.word	0x08005859
 8005118:	0800586a 	.word	0x0800586a

0800511c <memcpy>:
 800511c:	440a      	add	r2, r1
 800511e:	4291      	cmp	r1, r2
 8005120:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005124:	d100      	bne.n	8005128 <memcpy+0xc>
 8005126:	4770      	bx	lr
 8005128:	b510      	push	{r4, lr}
 800512a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005132:	4291      	cmp	r1, r2
 8005134:	d1f9      	bne.n	800512a <memcpy+0xe>
 8005136:	bd10      	pop	{r4, pc}

08005138 <memmove>:
 8005138:	4288      	cmp	r0, r1
 800513a:	b510      	push	{r4, lr}
 800513c:	eb01 0402 	add.w	r4, r1, r2
 8005140:	d902      	bls.n	8005148 <memmove+0x10>
 8005142:	4284      	cmp	r4, r0
 8005144:	4623      	mov	r3, r4
 8005146:	d807      	bhi.n	8005158 <memmove+0x20>
 8005148:	1e43      	subs	r3, r0, #1
 800514a:	42a1      	cmp	r1, r4
 800514c:	d008      	beq.n	8005160 <memmove+0x28>
 800514e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005156:	e7f8      	b.n	800514a <memmove+0x12>
 8005158:	4402      	add	r2, r0
 800515a:	4601      	mov	r1, r0
 800515c:	428a      	cmp	r2, r1
 800515e:	d100      	bne.n	8005162 <memmove+0x2a>
 8005160:	bd10      	pop	{r4, pc}
 8005162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800516a:	e7f7      	b.n	800515c <memmove+0x24>

0800516c <_free_r>:
 800516c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800516e:	2900      	cmp	r1, #0
 8005170:	d044      	beq.n	80051fc <_free_r+0x90>
 8005172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005176:	9001      	str	r0, [sp, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f1a1 0404 	sub.w	r4, r1, #4
 800517e:	bfb8      	it	lt
 8005180:	18e4      	addlt	r4, r4, r3
 8005182:	f000 f913 	bl	80053ac <__malloc_lock>
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <_free_r+0x94>)
 8005188:	9801      	ldr	r0, [sp, #4]
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	b933      	cbnz	r3, 800519c <_free_r+0x30>
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6014      	str	r4, [r2, #0]
 8005192:	b003      	add	sp, #12
 8005194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005198:	f000 b90e 	b.w	80053b8 <__malloc_unlock>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d908      	bls.n	80051b2 <_free_r+0x46>
 80051a0:	6825      	ldr	r5, [r4, #0]
 80051a2:	1961      	adds	r1, r4, r5
 80051a4:	428b      	cmp	r3, r1
 80051a6:	bf01      	itttt	eq
 80051a8:	6819      	ldreq	r1, [r3, #0]
 80051aa:	685b      	ldreq	r3, [r3, #4]
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	e7ed      	b.n	800518e <_free_r+0x22>
 80051b2:	461a      	mov	r2, r3
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b10b      	cbz	r3, 80051bc <_free_r+0x50>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d9fa      	bls.n	80051b2 <_free_r+0x46>
 80051bc:	6811      	ldr	r1, [r2, #0]
 80051be:	1855      	adds	r5, r2, r1
 80051c0:	42a5      	cmp	r5, r4
 80051c2:	d10b      	bne.n	80051dc <_free_r+0x70>
 80051c4:	6824      	ldr	r4, [r4, #0]
 80051c6:	4421      	add	r1, r4
 80051c8:	1854      	adds	r4, r2, r1
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	d1e0      	bne.n	8005192 <_free_r+0x26>
 80051d0:	681c      	ldr	r4, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	6053      	str	r3, [r2, #4]
 80051d6:	4421      	add	r1, r4
 80051d8:	6011      	str	r1, [r2, #0]
 80051da:	e7da      	b.n	8005192 <_free_r+0x26>
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x78>
 80051de:	230c      	movs	r3, #12
 80051e0:	6003      	str	r3, [r0, #0]
 80051e2:	e7d6      	b.n	8005192 <_free_r+0x26>
 80051e4:	6825      	ldr	r5, [r4, #0]
 80051e6:	1961      	adds	r1, r4, r5
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf04      	itt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	bf04      	itt	eq
 80051f4:	1949      	addeq	r1, r1, r5
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	6054      	str	r4, [r2, #4]
 80051fa:	e7ca      	b.n	8005192 <_free_r+0x26>
 80051fc:	b003      	add	sp, #12
 80051fe:	bd30      	pop	{r4, r5, pc}
 8005200:	20000718 	.word	0x20000718

08005204 <sbrk_aligned>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4e0e      	ldr	r6, [pc, #56]	; (8005240 <sbrk_aligned+0x3c>)
 8005208:	460c      	mov	r4, r1
 800520a:	6831      	ldr	r1, [r6, #0]
 800520c:	4605      	mov	r5, r0
 800520e:	b911      	cbnz	r1, 8005216 <sbrk_aligned+0x12>
 8005210:	f000 f8bc 	bl	800538c <_sbrk_r>
 8005214:	6030      	str	r0, [r6, #0]
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f000 f8b7 	bl	800538c <_sbrk_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d00a      	beq.n	8005238 <sbrk_aligned+0x34>
 8005222:	1cc4      	adds	r4, r0, #3
 8005224:	f024 0403 	bic.w	r4, r4, #3
 8005228:	42a0      	cmp	r0, r4
 800522a:	d007      	beq.n	800523c <sbrk_aligned+0x38>
 800522c:	1a21      	subs	r1, r4, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f000 f8ac 	bl	800538c <_sbrk_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d101      	bne.n	800523c <sbrk_aligned+0x38>
 8005238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800523c:	4620      	mov	r0, r4
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	2000071c 	.word	0x2000071c

08005244 <_malloc_r>:
 8005244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005248:	1ccd      	adds	r5, r1, #3
 800524a:	f025 0503 	bic.w	r5, r5, #3
 800524e:	3508      	adds	r5, #8
 8005250:	2d0c      	cmp	r5, #12
 8005252:	bf38      	it	cc
 8005254:	250c      	movcc	r5, #12
 8005256:	2d00      	cmp	r5, #0
 8005258:	4607      	mov	r7, r0
 800525a:	db01      	blt.n	8005260 <_malloc_r+0x1c>
 800525c:	42a9      	cmp	r1, r5
 800525e:	d905      	bls.n	800526c <_malloc_r+0x28>
 8005260:	230c      	movs	r3, #12
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	2600      	movs	r6, #0
 8005266:	4630      	mov	r0, r6
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	4e2e      	ldr	r6, [pc, #184]	; (8005328 <_malloc_r+0xe4>)
 800526e:	f000 f89d 	bl	80053ac <__malloc_lock>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	461c      	mov	r4, r3
 8005276:	bb34      	cbnz	r4, 80052c6 <_malloc_r+0x82>
 8005278:	4629      	mov	r1, r5
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ffc2 	bl	8005204 <sbrk_aligned>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	4604      	mov	r4, r0
 8005284:	d14d      	bne.n	8005322 <_malloc_r+0xde>
 8005286:	6834      	ldr	r4, [r6, #0]
 8005288:	4626      	mov	r6, r4
 800528a:	2e00      	cmp	r6, #0
 800528c:	d140      	bne.n	8005310 <_malloc_r+0xcc>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	4631      	mov	r1, r6
 8005292:	4638      	mov	r0, r7
 8005294:	eb04 0803 	add.w	r8, r4, r3
 8005298:	f000 f878 	bl	800538c <_sbrk_r>
 800529c:	4580      	cmp	r8, r0
 800529e:	d13a      	bne.n	8005316 <_malloc_r+0xd2>
 80052a0:	6821      	ldr	r1, [r4, #0]
 80052a2:	3503      	adds	r5, #3
 80052a4:	1a6d      	subs	r5, r5, r1
 80052a6:	f025 0503 	bic.w	r5, r5, #3
 80052aa:	3508      	adds	r5, #8
 80052ac:	2d0c      	cmp	r5, #12
 80052ae:	bf38      	it	cc
 80052b0:	250c      	movcc	r5, #12
 80052b2:	4629      	mov	r1, r5
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7ff ffa5 	bl	8005204 <sbrk_aligned>
 80052ba:	3001      	adds	r0, #1
 80052bc:	d02b      	beq.n	8005316 <_malloc_r+0xd2>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	442b      	add	r3, r5
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	e00e      	b.n	80052e4 <_malloc_r+0xa0>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	1b52      	subs	r2, r2, r5
 80052ca:	d41e      	bmi.n	800530a <_malloc_r+0xc6>
 80052cc:	2a0b      	cmp	r2, #11
 80052ce:	d916      	bls.n	80052fe <_malloc_r+0xba>
 80052d0:	1961      	adds	r1, r4, r5
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	6025      	str	r5, [r4, #0]
 80052d6:	bf18      	it	ne
 80052d8:	6059      	strne	r1, [r3, #4]
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	bf08      	it	eq
 80052de:	6031      	streq	r1, [r6, #0]
 80052e0:	5162      	str	r2, [r4, r5]
 80052e2:	604b      	str	r3, [r1, #4]
 80052e4:	4638      	mov	r0, r7
 80052e6:	f104 060b 	add.w	r6, r4, #11
 80052ea:	f000 f865 	bl	80053b8 <__malloc_unlock>
 80052ee:	f026 0607 	bic.w	r6, r6, #7
 80052f2:	1d23      	adds	r3, r4, #4
 80052f4:	1af2      	subs	r2, r6, r3
 80052f6:	d0b6      	beq.n	8005266 <_malloc_r+0x22>
 80052f8:	1b9b      	subs	r3, r3, r6
 80052fa:	50a3      	str	r3, [r4, r2]
 80052fc:	e7b3      	b.n	8005266 <_malloc_r+0x22>
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	42a3      	cmp	r3, r4
 8005302:	bf0c      	ite	eq
 8005304:	6032      	streq	r2, [r6, #0]
 8005306:	605a      	strne	r2, [r3, #4]
 8005308:	e7ec      	b.n	80052e4 <_malloc_r+0xa0>
 800530a:	4623      	mov	r3, r4
 800530c:	6864      	ldr	r4, [r4, #4]
 800530e:	e7b2      	b.n	8005276 <_malloc_r+0x32>
 8005310:	4634      	mov	r4, r6
 8005312:	6876      	ldr	r6, [r6, #4]
 8005314:	e7b9      	b.n	800528a <_malloc_r+0x46>
 8005316:	230c      	movs	r3, #12
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4638      	mov	r0, r7
 800531c:	f000 f84c 	bl	80053b8 <__malloc_unlock>
 8005320:	e7a1      	b.n	8005266 <_malloc_r+0x22>
 8005322:	6025      	str	r5, [r4, #0]
 8005324:	e7de      	b.n	80052e4 <_malloc_r+0xa0>
 8005326:	bf00      	nop
 8005328:	20000718 	.word	0x20000718

0800532c <_realloc_r>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	4680      	mov	r8, r0
 8005332:	4614      	mov	r4, r2
 8005334:	460e      	mov	r6, r1
 8005336:	b921      	cbnz	r1, 8005342 <_realloc_r+0x16>
 8005338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533c:	4611      	mov	r1, r2
 800533e:	f7ff bf81 	b.w	8005244 <_malloc_r>
 8005342:	b92a      	cbnz	r2, 8005350 <_realloc_r+0x24>
 8005344:	f7ff ff12 	bl	800516c <_free_r>
 8005348:	4625      	mov	r5, r4
 800534a:	4628      	mov	r0, r5
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	f000 f838 	bl	80053c4 <_malloc_usable_size_r>
 8005354:	4284      	cmp	r4, r0
 8005356:	4607      	mov	r7, r0
 8005358:	d802      	bhi.n	8005360 <_realloc_r+0x34>
 800535a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800535e:	d812      	bhi.n	8005386 <_realloc_r+0x5a>
 8005360:	4621      	mov	r1, r4
 8005362:	4640      	mov	r0, r8
 8005364:	f7ff ff6e 	bl	8005244 <_malloc_r>
 8005368:	4605      	mov	r5, r0
 800536a:	2800      	cmp	r0, #0
 800536c:	d0ed      	beq.n	800534a <_realloc_r+0x1e>
 800536e:	42bc      	cmp	r4, r7
 8005370:	4622      	mov	r2, r4
 8005372:	4631      	mov	r1, r6
 8005374:	bf28      	it	cs
 8005376:	463a      	movcs	r2, r7
 8005378:	f7ff fed0 	bl	800511c <memcpy>
 800537c:	4631      	mov	r1, r6
 800537e:	4640      	mov	r0, r8
 8005380:	f7ff fef4 	bl	800516c <_free_r>
 8005384:	e7e1      	b.n	800534a <_realloc_r+0x1e>
 8005386:	4635      	mov	r5, r6
 8005388:	e7df      	b.n	800534a <_realloc_r+0x1e>
	...

0800538c <_sbrk_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d06      	ldr	r5, [pc, #24]	; (80053a8 <_sbrk_r+0x1c>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	f7fc f8aa 	bl	80014f0 <_sbrk>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_sbrk_r+0x1a>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_sbrk_r+0x1a>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20000720 	.word	0x20000720

080053ac <__malloc_lock>:
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <__malloc_lock+0x8>)
 80053ae:	f000 b811 	b.w	80053d4 <__retarget_lock_acquire_recursive>
 80053b2:	bf00      	nop
 80053b4:	20000724 	.word	0x20000724

080053b8 <__malloc_unlock>:
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__malloc_unlock+0x8>)
 80053ba:	f000 b80c 	b.w	80053d6 <__retarget_lock_release_recursive>
 80053be:	bf00      	nop
 80053c0:	20000724 	.word	0x20000724

080053c4 <_malloc_usable_size_r>:
 80053c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c8:	1f18      	subs	r0, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bfbc      	itt	lt
 80053ce:	580b      	ldrlt	r3, [r1, r0]
 80053d0:	18c0      	addlt	r0, r0, r3
 80053d2:	4770      	bx	lr

080053d4 <__retarget_lock_acquire_recursive>:
 80053d4:	4770      	bx	lr

080053d6 <__retarget_lock_release_recursive>:
 80053d6:	4770      	bx	lr

080053d8 <exp>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	ed2d 8b02 	vpush	{d8}
 80053de:	ec55 4b10 	vmov	r4, r5, d0
 80053e2:	f000 f841 	bl	8005468 <__ieee754_exp>
 80053e6:	eeb0 8a40 	vmov.f32	s16, s0
 80053ea:	eef0 8a60 	vmov.f32	s17, s1
 80053ee:	ec45 4b10 	vmov	d0, r4, r5
 80053f2:	f000 f9eb 	bl	80057cc <finite>
 80053f6:	b168      	cbz	r0, 8005414 <exp+0x3c>
 80053f8:	a317      	add	r3, pc, #92	; (adr r3, 8005458 <exp+0x80>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4620      	mov	r0, r4
 8005400:	4629      	mov	r1, r5
 8005402:	f7fb fb91 	bl	8000b28 <__aeabi_dcmpgt>
 8005406:	b160      	cbz	r0, 8005422 <exp+0x4a>
 8005408:	f7ff fb32 	bl	8004a70 <__errno>
 800540c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8005448 <exp+0x70>
 8005410:	2322      	movs	r3, #34	; 0x22
 8005412:	6003      	str	r3, [r0, #0]
 8005414:	eeb0 0a48 	vmov.f32	s0, s16
 8005418:	eef0 0a68 	vmov.f32	s1, s17
 800541c:	ecbd 8b02 	vpop	{d8}
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	a30f      	add	r3, pc, #60	; (adr r3, 8005460 <exp+0x88>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb fb5e 	bl	8000aec <__aeabi_dcmplt>
 8005430:	2800      	cmp	r0, #0
 8005432:	d0ef      	beq.n	8005414 <exp+0x3c>
 8005434:	f7ff fb1c 	bl	8004a70 <__errno>
 8005438:	2322      	movs	r3, #34	; 0x22
 800543a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8005450 <exp+0x78>
 800543e:	6003      	str	r3, [r0, #0]
 8005440:	e7e8      	b.n	8005414 <exp+0x3c>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	00000000 	.word	0x00000000
 800544c:	7ff00000 	.word	0x7ff00000
	...
 8005458:	fefa39ef 	.word	0xfefa39ef
 800545c:	40862e42 	.word	0x40862e42
 8005460:	d52d3051 	.word	0xd52d3051
 8005464:	c0874910 	.word	0xc0874910

08005468 <__ieee754_exp>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	ec55 4b10 	vmov	r4, r5, d0
 8005470:	49b5      	ldr	r1, [pc, #724]	; (8005748 <__ieee754_exp+0x2e0>)
 8005472:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005476:	428b      	cmp	r3, r1
 8005478:	ed2d 8b04 	vpush	{d8-d9}
 800547c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005480:	d93d      	bls.n	80054fe <__ieee754_exp+0x96>
 8005482:	49b2      	ldr	r1, [pc, #712]	; (800574c <__ieee754_exp+0x2e4>)
 8005484:	428b      	cmp	r3, r1
 8005486:	d918      	bls.n	80054ba <__ieee754_exp+0x52>
 8005488:	ee10 3a10 	vmov	r3, s0
 800548c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8005490:	4313      	orrs	r3, r2
 8005492:	d009      	beq.n	80054a8 <__ieee754_exp+0x40>
 8005494:	ee10 2a10 	vmov	r2, s0
 8005498:	462b      	mov	r3, r5
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f7fa fefd 	bl	800029c <__adddf3>
 80054a2:	4604      	mov	r4, r0
 80054a4:	460d      	mov	r5, r1
 80054a6:	e002      	b.n	80054ae <__ieee754_exp+0x46>
 80054a8:	b10e      	cbz	r6, 80054ae <__ieee754_exp+0x46>
 80054aa:	2400      	movs	r4, #0
 80054ac:	2500      	movs	r5, #0
 80054ae:	ecbd 8b04 	vpop	{d8-d9}
 80054b2:	ec45 4b10 	vmov	d0, r4, r5
 80054b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ba:	a38d      	add	r3, pc, #564	; (adr r3, 80056f0 <__ieee754_exp+0x288>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	ee10 0a10 	vmov	r0, s0
 80054c4:	4629      	mov	r1, r5
 80054c6:	f7fb fb2f 	bl	8000b28 <__aeabi_dcmpgt>
 80054ca:	4607      	mov	r7, r0
 80054cc:	b130      	cbz	r0, 80054dc <__ieee754_exp+0x74>
 80054ce:	ecbd 8b04 	vpop	{d8-d9}
 80054d2:	2000      	movs	r0, #0
 80054d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	f000 b96f 	b.w	80057ba <__math_oflow>
 80054dc:	a386      	add	r3, pc, #536	; (adr r3, 80056f8 <__ieee754_exp+0x290>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	f7fb fb01 	bl	8000aec <__aeabi_dcmplt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f000 808b 	beq.w	8005606 <__ieee754_exp+0x19e>
 80054f0:	ecbd 8b04 	vpop	{d8-d9}
 80054f4:	4638      	mov	r0, r7
 80054f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fa:	f000 b955 	b.w	80057a8 <__math_uflow>
 80054fe:	4a94      	ldr	r2, [pc, #592]	; (8005750 <__ieee754_exp+0x2e8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	f240 80ac 	bls.w	800565e <__ieee754_exp+0x1f6>
 8005506:	4a93      	ldr	r2, [pc, #588]	; (8005754 <__ieee754_exp+0x2ec>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d87c      	bhi.n	8005606 <__ieee754_exp+0x19e>
 800550c:	4b92      	ldr	r3, [pc, #584]	; (8005758 <__ieee754_exp+0x2f0>)
 800550e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	ee10 0a10 	vmov	r0, s0
 800551a:	4629      	mov	r1, r5
 800551c:	f7fa febc 	bl	8000298 <__aeabi_dsub>
 8005520:	4b8e      	ldr	r3, [pc, #568]	; (800575c <__ieee754_exp+0x2f4>)
 8005522:	00f7      	lsls	r7, r6, #3
 8005524:	443b      	add	r3, r7
 8005526:	ed93 7b00 	vldr	d7, [r3]
 800552a:	f1c6 0a01 	rsb	sl, r6, #1
 800552e:	4680      	mov	r8, r0
 8005530:	4689      	mov	r9, r1
 8005532:	ebaa 0a06 	sub.w	sl, sl, r6
 8005536:	eeb0 8a47 	vmov.f32	s16, s14
 800553a:	eef0 8a67 	vmov.f32	s17, s15
 800553e:	ec53 2b18 	vmov	r2, r3, d8
 8005542:	4640      	mov	r0, r8
 8005544:	4649      	mov	r1, r9
 8005546:	f7fa fea7 	bl	8000298 <__aeabi_dsub>
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fb f857 	bl	8000608 <__aeabi_dmul>
 800555a:	a369      	add	r3, pc, #420	; (adr r3, 8005700 <__ieee754_exp+0x298>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	f7fb f850 	bl	8000608 <__aeabi_dmul>
 8005568:	a367      	add	r3, pc, #412	; (adr r3, 8005708 <__ieee754_exp+0x2a0>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fa fe93 	bl	8000298 <__aeabi_dsub>
 8005572:	4632      	mov	r2, r6
 8005574:	463b      	mov	r3, r7
 8005576:	f7fb f847 	bl	8000608 <__aeabi_dmul>
 800557a:	a365      	add	r3, pc, #404	; (adr r3, 8005710 <__ieee754_exp+0x2a8>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fa fe8c 	bl	800029c <__adddf3>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	f7fb f83e 	bl	8000608 <__aeabi_dmul>
 800558c:	a362      	add	r3, pc, #392	; (adr r3, 8005718 <__ieee754_exp+0x2b0>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fa fe81 	bl	8000298 <__aeabi_dsub>
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	f7fb f835 	bl	8000608 <__aeabi_dmul>
 800559e:	a360      	add	r3, pc, #384	; (adr r3, 8005720 <__ieee754_exp+0x2b8>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa fe7a 	bl	800029c <__adddf3>
 80055a8:	4632      	mov	r2, r6
 80055aa:	463b      	mov	r3, r7
 80055ac:	f7fb f82c 	bl	8000608 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fa fe6e 	bl	8000298 <__aeabi_dsub>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4606      	mov	r6, r0
 80055c2:	460f      	mov	r7, r1
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fb f81e 	bl	8000608 <__aeabi_dmul>
 80055cc:	ec41 0b19 	vmov	d9, r0, r1
 80055d0:	f1ba 0f00 	cmp.w	sl, #0
 80055d4:	d15d      	bne.n	8005692 <__ieee754_exp+0x22a>
 80055d6:	2200      	movs	r2, #0
 80055d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fa fe5a 	bl	8000298 <__aeabi_dsub>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	ec51 0b19 	vmov	r0, r1, d9
 80055ec:	f7fb f936 	bl	800085c <__aeabi_ddiv>
 80055f0:	4622      	mov	r2, r4
 80055f2:	462b      	mov	r3, r5
 80055f4:	f7fa fe50 	bl	8000298 <__aeabi_dsub>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	2000      	movs	r0, #0
 80055fe:	4958      	ldr	r1, [pc, #352]	; (8005760 <__ieee754_exp+0x2f8>)
 8005600:	f7fa fe4a 	bl	8000298 <__aeabi_dsub>
 8005604:	e74d      	b.n	80054a2 <__ieee754_exp+0x3a>
 8005606:	4857      	ldr	r0, [pc, #348]	; (8005764 <__ieee754_exp+0x2fc>)
 8005608:	a347      	add	r3, pc, #284	; (adr r3, 8005728 <__ieee754_exp+0x2c0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8005612:	4629      	mov	r1, r5
 8005614:	4620      	mov	r0, r4
 8005616:	f7fa fff7 	bl	8000608 <__aeabi_dmul>
 800561a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800561e:	f7fa fe3d 	bl	800029c <__adddf3>
 8005622:	f7fb fa8b 	bl	8000b3c <__aeabi_d2iz>
 8005626:	4682      	mov	sl, r0
 8005628:	f7fa ff84 	bl	8000534 <__aeabi_i2d>
 800562c:	a340      	add	r3, pc, #256	; (adr r3, 8005730 <__ieee754_exp+0x2c8>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	4606      	mov	r6, r0
 8005634:	460f      	mov	r7, r1
 8005636:	f7fa ffe7 	bl	8000608 <__aeabi_dmul>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fa fe29 	bl	8000298 <__aeabi_dsub>
 8005646:	a33c      	add	r3, pc, #240	; (adr r3, 8005738 <__ieee754_exp+0x2d0>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	4680      	mov	r8, r0
 800564e:	4689      	mov	r9, r1
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fa ffd8 	bl	8000608 <__aeabi_dmul>
 8005658:	ec41 0b18 	vmov	d8, r0, r1
 800565c:	e76f      	b.n	800553e <__ieee754_exp+0xd6>
 800565e:	4a42      	ldr	r2, [pc, #264]	; (8005768 <__ieee754_exp+0x300>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d811      	bhi.n	8005688 <__ieee754_exp+0x220>
 8005664:	a336      	add	r3, pc, #216	; (adr r3, 8005740 <__ieee754_exp+0x2d8>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	ee10 0a10 	vmov	r0, s0
 800566e:	4629      	mov	r1, r5
 8005670:	f7fa fe14 	bl	800029c <__adddf3>
 8005674:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <__ieee754_exp+0x2f8>)
 8005676:	2200      	movs	r2, #0
 8005678:	f7fb fa56 	bl	8000b28 <__aeabi_dcmpgt>
 800567c:	b138      	cbz	r0, 800568e <__ieee754_exp+0x226>
 800567e:	4b38      	ldr	r3, [pc, #224]	; (8005760 <__ieee754_exp+0x2f8>)
 8005680:	2200      	movs	r2, #0
 8005682:	4620      	mov	r0, r4
 8005684:	4629      	mov	r1, r5
 8005686:	e70a      	b.n	800549e <__ieee754_exp+0x36>
 8005688:	f04f 0a00 	mov.w	sl, #0
 800568c:	e75f      	b.n	800554e <__ieee754_exp+0xe6>
 800568e:	4682      	mov	sl, r0
 8005690:	e75d      	b.n	800554e <__ieee754_exp+0xe6>
 8005692:	4632      	mov	r2, r6
 8005694:	463b      	mov	r3, r7
 8005696:	2000      	movs	r0, #0
 8005698:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800569c:	f7fa fdfc 	bl	8000298 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	ec51 0b19 	vmov	r0, r1, d9
 80056a8:	f7fb f8d8 	bl	800085c <__aeabi_ddiv>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	ec51 0b18 	vmov	r0, r1, d8
 80056b4:	f7fa fdf0 	bl	8000298 <__aeabi_dsub>
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	f7fa fdec 	bl	8000298 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	2000      	movs	r0, #0
 80056c6:	4926      	ldr	r1, [pc, #152]	; (8005760 <__ieee754_exp+0x2f8>)
 80056c8:	f7fa fde6 	bl	8000298 <__aeabi_dsub>
 80056cc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80056d0:	4592      	cmp	sl, r2
 80056d2:	db02      	blt.n	80056da <__ieee754_exp+0x272>
 80056d4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80056d8:	e6e3      	b.n	80054a2 <__ieee754_exp+0x3a>
 80056da:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80056de:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80056e2:	2200      	movs	r2, #0
 80056e4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80056e8:	f7fa ff8e 	bl	8000608 <__aeabi_dmul>
 80056ec:	e6d9      	b.n	80054a2 <__ieee754_exp+0x3a>
 80056ee:	bf00      	nop
 80056f0:	fefa39ef 	.word	0xfefa39ef
 80056f4:	40862e42 	.word	0x40862e42
 80056f8:	d52d3051 	.word	0xd52d3051
 80056fc:	c0874910 	.word	0xc0874910
 8005700:	72bea4d0 	.word	0x72bea4d0
 8005704:	3e663769 	.word	0x3e663769
 8005708:	c5d26bf1 	.word	0xc5d26bf1
 800570c:	3ebbbd41 	.word	0x3ebbbd41
 8005710:	af25de2c 	.word	0xaf25de2c
 8005714:	3f11566a 	.word	0x3f11566a
 8005718:	16bebd93 	.word	0x16bebd93
 800571c:	3f66c16c 	.word	0x3f66c16c
 8005720:	5555553e 	.word	0x5555553e
 8005724:	3fc55555 	.word	0x3fc55555
 8005728:	652b82fe 	.word	0x652b82fe
 800572c:	3ff71547 	.word	0x3ff71547
 8005730:	fee00000 	.word	0xfee00000
 8005734:	3fe62e42 	.word	0x3fe62e42
 8005738:	35793c76 	.word	0x35793c76
 800573c:	3dea39ef 	.word	0x3dea39ef
 8005740:	8800759c 	.word	0x8800759c
 8005744:	7e37e43c 	.word	0x7e37e43c
 8005748:	40862e41 	.word	0x40862e41
 800574c:	7fefffff 	.word	0x7fefffff
 8005750:	3fd62e42 	.word	0x3fd62e42
 8005754:	3ff0a2b1 	.word	0x3ff0a2b1
 8005758:	08005890 	.word	0x08005890
 800575c:	080058a0 	.word	0x080058a0
 8005760:	3ff00000 	.word	0x3ff00000
 8005764:	08005880 	.word	0x08005880
 8005768:	3defffff 	.word	0x3defffff

0800576c <with_errno>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	460d      	mov	r5, r1
 8005772:	4616      	mov	r6, r2
 8005774:	f7ff f97c 	bl	8004a70 <__errno>
 8005778:	4629      	mov	r1, r5
 800577a:	6006      	str	r6, [r0, #0]
 800577c:	4620      	mov	r0, r4
 800577e:	bd70      	pop	{r4, r5, r6, pc}

08005780 <xflow>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	4614      	mov	r4, r2
 8005784:	461d      	mov	r5, r3
 8005786:	b108      	cbz	r0, 800578c <xflow+0xc>
 8005788:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800578c:	e9cd 2300 	strd	r2, r3, [sp]
 8005790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fa ff36 	bl	8000608 <__aeabi_dmul>
 800579c:	2222      	movs	r2, #34	; 0x22
 800579e:	b003      	add	sp, #12
 80057a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a4:	f7ff bfe2 	b.w	800576c <with_errno>

080057a8 <__math_uflow>:
 80057a8:	b508      	push	{r3, lr}
 80057aa:	2200      	movs	r2, #0
 80057ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057b0:	f7ff ffe6 	bl	8005780 <xflow>
 80057b4:	ec41 0b10 	vmov	d0, r0, r1
 80057b8:	bd08      	pop	{r3, pc}

080057ba <__math_oflow>:
 80057ba:	b508      	push	{r3, lr}
 80057bc:	2200      	movs	r2, #0
 80057be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80057c2:	f7ff ffdd 	bl	8005780 <xflow>
 80057c6:	ec41 0b10 	vmov	d0, r0, r1
 80057ca:	bd08      	pop	{r3, pc}

080057cc <finite>:
 80057cc:	b082      	sub	sp, #8
 80057ce:	ed8d 0b00 	vstr	d0, [sp]
 80057d2:	9801      	ldr	r0, [sp, #4]
 80057d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80057d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80057dc:	0fc0      	lsrs	r0, r0, #31
 80057de:	b002      	add	sp, #8
 80057e0:	4770      	bx	lr
	...

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr
